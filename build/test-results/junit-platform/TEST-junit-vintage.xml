<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="JUnit Vintage" tests="533" skipped="0" failures="0" errors="0" time="49.428" hostname="xand-laptop" timestamp="2018-06-26T10:59:59">
<properties>
<property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
<property name="file.encoding" value="UTF-8"/>
<property name="file.encoding.pkg" value="sun.io"/>
<property name="file.separator" value="/"/>
<property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
<property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
<property name="java.class.path" value="/home/xand/Desktop/jabrefES2/build/classes/java/test:/home/xand/Desktop/jabrefES2/build/resources/test:/home/xand/Desktop/jabrefES2/build/classes/java/main:/home/xand/Desktop/jabrefES2/build/resources/main:/home/xand/Desktop/jabrefES2/lib/spin.jar:/home/xand/Desktop/jabrefES2/lib/AppleJavaExtensions.jar:/home/xand/Desktop/jabrefES2/lib/customjfx-1.0.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.jgoodies/jgoodies-forms/1.9.0/eda960be2f88d47d14a81b742772b07684abc7d0/jgoodies-forms-1.9.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.jgoodies/jgoodies-common/1.8.1/dffc159cf71bde5dcbb65916305684f6b43d45b1/jgoodies-common-1.8.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.pdfbox/pdfbox/2.0.9/d0425578218624388f2ec84a0b3a11efd55df0f5/pdfbox-2.0.9.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.pdfbox/fontbox/2.0.9/f961f17ebdbc307e9055e3cf7c0e207f0895ae55/fontbox-2.0.9.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.pdfbox/xmpbox/2.0.9/b406a2931213661cbbc308f8cfacd8fb6f763753/xmpbox-2.0.9.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.59/2507204241ab450456bdb8e8c0a8f986e418bd99/bcprov-jdk15on-1.59.jar:/home/xand/.gradle/caches/modules-2/files-2.1/commons-cli/commons-cli/1.4/c51c00206bb913cd8612b24abd9fa98ae89719b1/commons-cli-1.4.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.libreoffice/juh/5.4.2/d646e7c4f41b3d4a59f4aeaa1afd6ac8a7f7ed55/juh-5.4.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.libreoffice/jurt/5.4.2/7ec2894c5328809631061a061c8345d743a463f2/jurt-5.4.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.libreoffice/ridl/5.4.2/b5e016320589723cafc98fc7151dd07af6067fe/ridl-5.4.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.libreoffice/unoil/5.4.2/668ec722252b9b922d2aa1aefd27ea998fbf4ada/unoil-5.4.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.github.bkromhout/java-diff-utils/2.1.1/c03cbc3132a86e1f0ca9fce4245c5e82ca8bf4b3/java-diff-utils-2.1.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/info.debatty/java-string-similarity/1.1.0/5da6aca99c0f4cb218188d01e13d663570a4e8ce/java-string-similarity-1.1.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.antlr/antlr-runtime/3.5.2/cd9cd41361c155f3af0f653009dcecb08d8b4afd/antlr-runtime-3.5.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/de.undercouch/citeproc-java/1.0.1/8b812539afb29e49dc22ed410dc448452fb5d71e/citeproc-java-1.0.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.github.tomakehurst/wiremock/2.17.0/5c370ecaee5e2a6d87bdba919056d9f5de11eeb7/wiremock-2.17.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.github.jknack/handlebars-helpers/4.0.6/6aeaf8f563939982e451576323f95d3a8eb2b49b/handlebars-helpers-4.0.6.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.github.jknack/handlebars/4.0.6/ccf00179b6648523e5c64b9b5fb783d89e42401b/handlebars-4.0.6.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.antlr/antlr4-runtime/4.7.1/946f8aa9daa917dd81a8b818111bec7e288f821a/antlr4-runtime-4.7.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/mysql/mysql-connector-java/5.1.46/9a3e63b387e376364211e96827bc27db8d7a92e9/mysql-connector-java-5.1.46.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.impossibl.pgjdbc-ng/pgjdbc-ng/0.7.1/1db63f5c47cdc6ac0f1c8a0407022083c0c43313/pgjdbc-ng-0.7.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/net.java.dev.glazedlists/glazedlists_java15/1.9.1/3ec96aff6b7addc9a2f0f82eca7147613142e45/glazedlists_java15-1.9.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.reflections/reflections/0.9.11/23bba0ff497ec61fbca967d9b641c7681a71edb3/reflections-0.9.11.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/24.1-jre/96c528475465aeb22cce60605d230a7e67cebd7b/guava-24.1-jre.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.airhacks/afterburner.fx/1.7.0/c726ffe8a4d9825b02a22653f8672612a008df25/afterburner.fx-1.7.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/de.codecentric.centerdevice/javafxsvg/1.3.0/b590604fe5639f9900857e9d58fea33936902bd4/javafxsvg-1.3.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/de.jensd/fontawesomefx-materialdesignfont/1.7.22-4/750b7bfd078ad646db36a3af4d088a4c121ed838/fontawesomefx-materialdesignfont-1.7.22-4.jar:/home/xand/.gradle/caches/modules-2/files-2.1/de.saxsys/mvvmfx-validation/1.7.0/dadaebfcc83a013212ede2abfbcb50833b5e48e8/mvvmfx-validation-1.7.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.fxmisc.easybind/easybind/1.0.3/336c8226dfa775c714bc8c3410a1565feffcfb34/easybind-1.0.3.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.fxmisc.richtext/richtextfx/0.9.0/59631394f04aec6b5031a74091f72d0c3767399b/richtextfx-0.9.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.fxmisc.flowless/flowless/0.6.1/d0794811efbc07d247de681ee0ee427cdb685d58/flowless-0.6.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.controlsfx/controlsfx/8.40.15-SNAPSHOT/1e8782f34bf113fd85ca1fc285ef900154d82330/controlsfx-8.40.15-SNAPSHOT.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.jsoup/jsoup/1.11.3/36da09a8f68484523fa2aaa100399d612b247d67/jsoup-1.11.3.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.mashape.unirest/unirest-java/1.4.9/778cffcba803dc7d43932266aef4c91f5b6b4dd0/unirest-java-1.4.9.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-slf4j-impl/2.11.0/9ba207b78e470fe7765ebee14f1f0336c9cbcc18/log4j-slf4j-impl-2.11.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.jayway.jsonpath/json-path/2.4.0/765a4401ceb2dc8d40553c2075eb80a8fa35c2ae/json-path-2.4.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.tngtech.archunit/archunit-junit/0.5.0/cfbb98d8b26a90fac0cc3143a03f7d7eace008/archunit-junit-0.5.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.tngtech.archunit/archunit/0.5.0/43797082462a70d67e654064a69d065bb33c00fb/archunit-0.5.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.8.0-beta2/ba136e771a794f77ab41fa879706e5cbd5b20f39/slf4j-api-1.8.0-beta2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-jcl/2.11.0/4acb58e36efe82c3ea518bd31f4f8325b37ae9b4/log4j-jcl-2.11.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-jul/2.11.0/643e7b8de1fdf296f726c2ab1ce2adb924aa0ea3/log4j-jul-2.11.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.microsoft.azure/applicationinsights-logging-log4j2/2.0.2/5f5d28b56dfd50b914e3d6ff9eb6f6bb8d0a64b1/applicationinsights-logging-log4j2-2.0.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-core/2.11.0/e6b751e02120c08702d98750f6a80bc25343b7f5/log4j-core-2.11.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-api/2.11.0/bede79a3f150711634a3047985517431bf6499f2/log4j-api-2.11.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.citationstyles/styles/1.0.1-SNAPSHOT/3432b1ebb33422e77a23f6b1fd1c6b7da68280a/styles-1.0.1-SNAPSHOT.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.citationstyles/locales/1.0.1-SNAPSHOT/891a5bac47615a04b6dfa8683c1ad27a58b484e7/locales-1.0.1-SNAPSHOT.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.github.tomtung/latex2unicode_2.12/0.2.2/dfa37b1fbe063be525993d2937c05fa349e5c5de/latex2unicode_2.12-0.2.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.microsoft.azure/applicationinsights-core/2.0.2/1f73797b7c92211abc2f80a7a05a0aa326ca99b0/applicationinsights-core-2.0.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-params/5.2.0-RC1/bcc204986709e4f37685b069765614c963678b05/junit-jupiter-params-5.2.0-RC1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-engine/5.2.0-RC1/764f6fad8103b1a6728c90684bfdb2682af4bec1/junit-jupiter-engine-5.2.0-RC1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-api/5.2.0-RC1/b6562d741468e7034f1a76fc1bdea2620fb91ce8/junit-jupiter-api-5.2.0-RC1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-launcher/1.2.0-RC1/e5f49617b5f5fe13d441f3cb0163980faf16455f/junit-platform-launcher-1.2.0-RC1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.mockito/mockito-core/2.18.3/98aa130476c5d1915dac35b5ad053a7ffcd675bc/mockito-core-2.18.3.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.assertj/assertj-swing-junit/3.8.0/51a93135b0edac8f92cd67bceea6efa2e2dfa870/assertj-swing-junit-3.8.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.xmlunit/xmlunit-matchers/2.6.0/391665735628016a57f330f8cc8fda64567f89e0/xmlunit-matchers-2.6.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.xmlunit/xmlunit-legacy/2.5.1/8c73fbce63d53dd873afe4b3de7d01026846fe0d/xmlunit-legacy-2.5.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.xmlunit/xmlunit-core/2.6.0/ed9bfba5c65a7162f6fbdaecb92f12b4c033ca9c/xmlunit-core-2.6.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.testfx/testfx-junit/4.0.13-alpha/21c11f63dd879d91d44d509d1e64834ad85091a5/testfx-junit-4.0.13-alpha.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.testfx/testfx-core/4.0.13-alpha/a8cca03f7d116b0847ebc03a2dfe462aab06a39b/testfx-core-4.0.13-alpha.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.vintage/junit-vintage-engine/5.2.0-RC1/a0c77ce678e2ad02ff5fafbcb7e828822f57d8e2/junit-vintage-engine-5.2.0-RC1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/xmlgraphics-commons/2.1/b61132defe1df4e91c1eb0ddf544958c50d358b5/xmlgraphics-commons-2.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpasyncclient/4.1.1/dd624f5a0ff43eb5cdf828d9739d3177ee00a5a9/httpasyncclient-4.1.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpmime/4.5.2/22b4c53dd9b6761024258de8f9240c3dce6ea368/httpmime-4.5.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.5.5/1603dfd56ebcd583ccdf337b6c3984ac55d89e58/httpclient-4.5.5.jar:/home/xand/.gradle/caches/modules-2/files-2.1/commons-logging/commons-logging/1.2/4bfc12adfe4842bf07b657f0369c4cb522955686/commons-logging-1.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.0/5871fb60dc68d67da54a663c3fd636a10a532948/jsr305-3.0.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/net.jcip/jcip-annotations/1.0/afba4942caaeaf46aab0b976afd57cc7c181467e/jcip-annotations-1.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/io.netty/netty-handler/4.1.8.Final/db01139bfb11afd009a695eef55b43bbf22c4ef5/netty-handler-4.1.8.Final.jar:/home/xand/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec/4.1.8.Final/1bd0a2d032e5c7fc3f42c1b483d0f4c57eb516a3/netty-codec-4.1.8.Final.jar:/home/xand/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport/4.1.8.Final/905b5dadce881c9824b3039c0df36dabbb7b6a07/netty-transport-4.1.8.Final.jar:/home/xand/.gradle/caches/modules-2/files-2.1/io.netty/netty-buffer/4.1.8.Final/43292c2622e340a0d07178c341ca3bdf3d662034/netty-buffer-4.1.8.Final.jar:/home/xand/.gradle/caches/modules-2/files-2.1/io.netty/netty-resolver/4.1.8.Final/2e116cdd5edc01b2305072b1dbbd17c0595dbfef/netty-resolver-4.1.8.Final.jar:/home/xand/.gradle/caches/modules-2/files-2.1/io.netty/netty-common/4.1.8.Final/ee62c80318413d2375d145e51e48d7d35c901324/netty-common-4.1.8.Final.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.checkerframework/checker-compat-qual/2.0.0/fc89b03860d11d6213d0154a62bcd1c2f69b9efa/checker-compat-qual-2.0.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.google.errorprone/error_prone_annotations/2.1.3/39b109f2cd352b2d71b52a3b5a1a9850e1dc304b/error_prone_annotations-2.1.3.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.google.j2objc/j2objc-annotations/1.1/976d8d30bebc251db406f2bdb3eb01962b5685b3/j2objc-annotations-1.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.codehaus.mojo/animal-sniffer-annotations/1.14/775b7e22fb10026eed3f86e8dc556dfafe35f2d5/animal-sniffer-annotations-1.14.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-transcoder/1.8/f330b3e9946ff21ddf3ea6d4f58ae44145cfd362/batik-transcoder-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/de.jensd/fontawesomefx-commons/8.15/b2c373e1706665588916e08ea513fcdb4c86148/fontawesomefx-commons-8.15.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.fxmisc.undo/undofx/2.0.0/b3435bc4ea13cf2f3ef66886083ef7f5533cf66e/undofx-2.0.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.reactfx/reactfx/2.0-M5/aa02bc40ebbb87a76d4b188516294612c8972b80/reactfx-2.0-M5.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.fxmisc.wellbehaved/wellbehavedfx/0.3.3/c69c986469f23feee75f09812357e6b6a0657d57/wellbehavedfx-0.3.3.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.json/json/20160212/a742e3f85161835b95877478c5dd5b405cefaab9/json-20160212.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-lang3/3.7/557edd918fd41f9260963583ebf5a61a43a6b423/commons-lang3-3.7.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.jbibtex/jbibtex/1.0.15/788ffe9f011b58aa81545430a07663c0214d80b8/jbibtex-1.0.15.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.lihaoyi/fastparse_2.12/0.4.2/25d704ea5543084e3ec2676f22dbd39154a4324c/fastparse_2.12-0.4.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.lihaoyi/fastparse-utils_2.12/0.4.2/bb0d90c37e54e124dcb79440d33e3b32553463f6/fastparse-utils_2.12-0.4.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.lihaoyi/sourcecode_2.12/0.1.3/37504e0fab14f28cff977250e891a25c8bd6a762/sourcecode_2.12-0.1.3.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.scala-lang/scala-library/2.12.3/f2e496f21af2d80b48e0a61773f84c3a76a0d06f/scala-library-2.12.3.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-engine/1.2.0-RC1/f1387abe5a3f0903847a5f4e5691e57bd963dd60/junit-platform-engine-1.2.0-RC1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-commons/1.2.0-RC1/9a03577807a83891042da270f9332b97e2723391/junit-platform-commons-1.2.0-RC1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apiguardian/apiguardian-api/1.0.0/3ef5276905e36f4d8055fe3cb0bdcc7503ffc85d/apiguardian-api-1.0.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.opentest4j/opentest4j/1.0.0/6f09c598e9ff64bf0ce2fa7e7de49a99ba83c0b4/opentest4j-1.0.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy/1.8.5/f16b6f8bf487d06e9f83da3033958a694f57c8a4/byte-buddy-1.8.5.jar:/home/xand/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy-agent/1.8.5/7bb88bffec91556155629ad4ff6a0e0013d4bf10/byte-buddy-agent-1.8.5.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.objenesis/objenesis/2.6/639033469776fd37c08358c6b92a4761feb2af4b/objenesis-2.6.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-webapp/9.2.24.v20180105/555daea1589044b647a50c137fc73dd91098248f/jetty-webapp-9.2.24.v20180105.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-servlet/9.2.24.v20180105/21fe471364a908faefbbfecfb273dab927b5e9f4/jetty-servlet-9.2.24.v20180105.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-security/9.2.24.v20180105/27378bd82a9e17d8f0e4b1cec2563bda6efe8c59/jetty-security-9.2.24.v20180105.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-server/9.2.24.v20180105/939a4edd1ab556f874f10f0c67fc7cf884a4d276/jetty-server-9.2.24.v20180105.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-servlets/9.2.24.v20180105/b9c4828634f72325548718f08e2d59463647bed2/jetty-servlets-9.2.24.v20180105.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.flipkart.zjsonpatch/zjsonpatch/0.4.4/d46c5b83f457c5ba48b630da59f648caa89ee19e/zjsonpatch-0.4.4.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.8.11/569a9f220273024523799dba9dd358121b0ee09/jackson-databind-2.8.11.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.8.11/876ead1db19f0c9e79c9789273a3ef8c6fd6c29b/jackson-core-2.8.11.jar:/home/xand/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-annotations/2.8.11/391de20b4e29cb3fb07d2454ace64be2c82ac91f/jackson-annotations-2.8.11.jar:/home/xand/.gradle/caches/modules-2/files-2.1/net.sf.jopt-simple/jopt-simple/5.0.3/cdd846cfc4e0f7eefafc02c0f5dce32b9303aa2a/jopt-simple-5.0.3.jar:/home/xand/.gradle/caches/modules-2/files-2.1/junit/junit/4.12/2973d150c0dc1fefe998f834810d68f278ea58ec/junit-4.12.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.assertj/assertj-swing/3.8.0/43e985f95237bf9c5fbfa21230f30cc5e859a4fb/assertj-swing-3.8.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.easytesting/fest-reflect/1.4.1/2b92d5275e92a49e16c7ce6bd7e46b9080db0530/fest-reflect-1.4.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.21.0-GA/598244f595db5c5fb713731eddbb1c91a58d959b/javassist-3.21.0-GA.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.3/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.assertj/assertj-core/3.9.1/c5ce126b15f28d56cd8f960c1a6a058b9c9aea87/assertj-core-3.9.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-bridge/1.8/4ab4110b0ed4650ef50d4a344f0ca5c027f3283a/batik-bridge-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-script/1.8/5bda6a9d45065b184c83c46b64d8002b4e0ab7c7/batik-script-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-anim/1.8/68197dfa3643a906ba250025a03dc42e6efe2dec/batik-anim-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-gvt/1.8/fbde4cd3c43001c162446cf43093d09fda346e11/batik-gvt-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-svggen/1.8/c4684e18303e931845df704f9b9f6995fd770789/batik-svggen-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-svg-dom/1.8/97c9d00d08c849066d2359b0f1124f0e82b952c2/batik-svg-dom-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-parser/1.8/86ec4ab0c828b570d0ccbeba14f85ac011a333f2/batik-parser-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-awt-util/1.8/5cd7f97060cdfab0139e70504962d48ceee71ef2/batik-awt-util-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-dom/1.8/4e696cf01cee52e8c4f86c842b5d8314e689209c/batik-dom-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-xml/1.8/9bf0ee759fed1e3a2e4ad41819eac69ff4873732/batik-xml-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-css/1.8/2b3f22cc65702a0821b7f0178d055282a1cdde59/batik-css-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-util/1.8/35dcd204f397d6976290ca48ffa0011ba9b7ef43/batik-util-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.xmlgraphics/batik-ext/1.8/8713f3238cfac337624a90c3ad7d45d7bc6fb1b5/batik-ext-1.8.jar:/home/xand/.gradle/caches/modules-2/files-2.1/xalan/xalan/2.7.0/a33c0097f1c70b20fa7ded220ea317eb3500515e/xalan-2.7.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/xml-apis/xml-apis-ext/1.3.04/41a8b86b358e87f3f13cf46069721719105aff66/xml-apis-ext-1.3.04.jar:/home/xand/.gradle/caches/modules-2/files-2.1/commons-io/commons-io/1.3.1/b90b6ac57cf27a2858eaa490d02ba7945d18ca7b/commons-io-1.3.1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore-nio/4.4.4/16badfc2d99db264c486ba8c57ae577301a58bd9/httpcore-nio-4.4.4.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.4.9/a86ce739e5a7175b4b234c290a00a5fdb80957a0/httpcore-4.4.9.jar:/home/xand/.gradle/caches/modules-2/files-2.1/javax.servlet/javax.servlet-api/3.1.0/3cd63d075497751784b2fa84be59432f4905bf7c/javax.servlet-api-3.1.0.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-http/9.2.24.v20180105/391d0a1545a2916b24605ddb22f636a63086048d/jetty-http-9.2.24.v20180105.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-io/9.2.24.v20180105/be1c08b859e420a066166e4c7411c1a66752ddd/jetty-io-9.2.24.v20180105.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-continuation/9.2.24.v20180105/4de97aaac685a68d6d8b9e5eb6504f79a5f9c45e/jetty-continuation-9.2.24.v20180105.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-xml/9.2.24.v20180105/39270536549b584ee13f794cab5f638783cdef99/jetty-xml-9.2.24.v20180105.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.eclipse.jetty/jetty-util/9.2.24.v20180105/66a65b2b78b3a67f359a0bb640c4c59197156f05/jetty-util-9.2.24.v20180105.jar:/home/xand/.gradle/caches/modules-2/files-2.1/net.minidev/json-smart/2.3/7396407491352ce4fa30de92efb158adb76b5b/json-smart-2.3.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.easytesting/fest-util/1.2.5/c4a8d7305b23b8d043be12c979813b096df11f44/fest-util-1.2.5.jar:/home/xand/.gradle/caches/modules-2/files-2.1/net.minidev/accessors-smart/1.2/c592b500269bfde36096641b01238a8350f8aa31/accessors-smart-1.2.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.mozilla/rhino/1.7R4/e982f2136574b9a423186fbaeaaa98dc3e5a5288/rhino-1.7R4.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm/5.0.4/da08b8cce7bbf903602a25a3a163ae252435795/asm-5.0.4.jar:/home/xand/.gradle/caches/modules-2/files-2.1/commons-codec/commons-codec/1.10/4b95f4897fa13f2cd904aee711aeafc0c5295cd8/commons-codec-1.10.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-console/1.2.0-M1/72ba5a006c0466168332188cdf8ecc9a2e381734/junit-platform-console-1.2.0-M1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-launcher/1.2.0-M1/a2aa78fac2b7314ecf60f8ba9fba2abc8c3618c8/junit-platform-launcher-1.2.0-M1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-engine/1.2.0-M1/f7438f9357ed72f9231b58576e7a4e2c85cae5ac/junit-platform-engine-1.2.0-M1.jar:/home/xand/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-commons/1.2.0-M1/5825e2252dd11aaa80811f85533b1838fc23a4a6/junit-platform-commons-1.2.0-M1.jar:build/tmp/expandedArchives/org.jacoco.agent-0.8.1.jar_8059ed6e1ab8b88aac5d9097fad847bb/jacocoagent.jar"/>
<property name="java.class.version" value="52.0"/>
<property name="java.endorsed.dirs" value="/home/xand/Desktop/jdk1.8.0_171/jre/lib/endorsed"/>
<property name="java.ext.dirs" value="/home/xand/Desktop/jdk1.8.0_171/jre/lib/ext:/usr/java/packages/lib/ext"/>
<property name="java.home" value="/home/xand/Desktop/jdk1.8.0_171/jre"/>
<property name="java.io.tmpdir" value="/tmp"/>
<property name="java.library.path" value="/usr/java/packages/lib/i386:/lib:/usr/lib"/>
<property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
<property name="java.runtime.version" value="1.8.0_171-b11"/>
<property name="java.specification.name" value="Java Platform API Specification"/>
<property name="java.specification.vendor" value="Oracle Corporation"/>
<property name="java.specification.version" value="1.8"/>
<property name="java.util.logging.manager" value="org.apache.logging.log4j.jul.LogManager"/>
<property name="java.vendor" value="Oracle Corporation"/>
<property name="java.vendor.url" value="http://java.oracle.com/"/>
<property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
<property name="java.version" value="1.8.0_171"/>
<property name="java.vm.info" value="mixed mode"/>
<property name="java.vm.name" value="Java HotSpot(TM) Server VM"/>
<property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
<property name="java.vm.specification.vendor" value="Oracle Corporation"/>
<property name="java.vm.specification.version" value="1.8"/>
<property name="java.vm.vendor" value="Oracle Corporation"/>
<property name="java.vm.version" value="25.171-b11"/>
<property name="javafx.macosx.embedded" value="true"/>
<property name="javafx.runtime.version" value="8.0.171-b11"/>
<property name="javafx.version" value="8.0.171"/>
<property name="line.separator" value="
"/>
<property name="os.arch" value="i386"/>
<property name="os.name" value="Linux"/>
<property name="os.version" value="4.13.0-45-generic"/>
<property name="path.separator" value=":"/>
<property name="sun.arch.data.model" value="32"/>
<property name="sun.awt.enableExtraMouseButtons" value="true"/>
<property name="sun.boot.class.path" value="/home/xand/Desktop/jdk1.8.0_171/jre/lib/resources.jar:/home/xand/Desktop/jdk1.8.0_171/jre/lib/rt.jar:/home/xand/Desktop/jdk1.8.0_171/jre/lib/sunrsasign.jar:/home/xand/Desktop/jdk1.8.0_171/jre/lib/jsse.jar:/home/xand/Desktop/jdk1.8.0_171/jre/lib/jce.jar:/home/xand/Desktop/jdk1.8.0_171/jre/lib/charsets.jar:/home/xand/Desktop/jdk1.8.0_171/jre/lib/jfr.jar:/home/xand/Desktop/jdk1.8.0_171/jre/classes"/>
<property name="sun.boot.library.path" value="/home/xand/Desktop/jdk1.8.0_171/jre/lib/i386"/>
<property name="sun.cpu.endian" value="little"/>
<property name="sun.cpu.isalist" value=""/>
<property name="sun.desktop" value="gnome"/>
<property name="sun.font.fontmanager" value="sun.awt.X11FontManager"/>
<property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
<property name="sun.java.command" value="org.junit.platform.console.ConsoleLauncher --details NONE --scan-class-path /home/xand/Desktop/jabrefES2/build/classes/java/jmh:/home/xand/Desktop/jabrefES2/build/resources/jmh:/home/xand/Desktop/jabrefES2/build/classes/java/main:/home/xand/Desktop/jabrefES2/build/resources/main:/home/xand/Desktop/jabrefES2/build/classes/java/test:/home/xand/Desktop/jabrefES2/build/resources/test -n ^(Test.*|.+[.$]Test.*|.*Tests?)$ -T DatabaseTest -T FetcherTest -T GUITest -T org.jabref.testutils.category.FetcherTest -T org.jabref.testutils.category.GUITest --reports-dir /home/xand/Desktop/jabrefES2/build/test-results/junit-platform"/>
<property name="sun.java.launcher" value="SUN_STANDARD"/>
<property name="sun.jnu.encoding" value="UTF-8"/>
<property name="sun.management.compiler" value="HotSpot Tiered Compilers"/>
<property name="sun.os.patch.level" value="unknown"/>
<property name="user.country" value="US"/>
<property name="user.dir" value="/home/xand/Desktop/jabrefES2"/>
<property name="user.home" value="/home/xand"/>
<property name="user.language" value="en"/>
<property name="user.name" value="xand"/>
<property name="user.timezone" value="America/Sao_Paulo"/>
<property name="user.variant" value=""/>
</properties>
<testcase name="testsAreIndependent[tests independent of org.jabref.preferences.JabRefPreferences?]" classname="org.jabref.architecture.TestArchitectureTests" time="2.535">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.architecture.TestArchitectureTests]/[test:%5Btests independent of org.jabref.preferences.JabRefPreferences?%5D]/[test:testsAreIndependent%5Btests independent of org.jabref.preferences.JabRefPreferences?%5D(org.jabref.architecture.TestArchitectureTests)]
display-name: testsAreIndependent[tests independent of org.jabref.preferences.JabRefPreferences?]
]]></system-out>
</testcase>
<testcase name="testsAreIndependent[tests independent of org.jabref.Globals?]" classname="org.jabref.architecture.TestArchitectureTests" time="0.071">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.architecture.TestArchitectureTests]/[test:%5Btests independent of org.jabref.Globals?%5D]/[test:testsAreIndependent%5Btests independent of org.jabref.Globals?%5D(org.jabref.architecture.TestArchitectureTests)]
display-name: testsAreIndependent[tests independent of org.jabref.Globals?]
]]></system-out>
</testcase>
<testcase name="assertDefaultValuesBibtex[0]" classname="org.jabref.model.EntryTypesTest" time="0.144">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:assertDefaultValuesBibtex%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: assertDefaultValuesBibtex[0]
]]></system-out>
</testcase>
<testcase name="standardTypeIsStillAcessibleIfOverwritten[0]" classname="org.jabref.model.EntryTypesTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:standardTypeIsStillAcessibleIfOverwritten%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: standardTypeIsStillAcessibleIfOverwritten[0]
]]></system-out>
</testcase>
<testcase name="standardTypeCannotBeRemoved[0]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:standardTypeCannotBeRemoved%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: standardTypeCannotBeRemoved[0]
]]></system-out>
</testcase>
<testcase name="unknownTypeIsNotFound[0]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:unknownTypeIsNotFound%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: unknownTypeIsNotFound[0]
]]></system-out>
</testcase>
<testcase name="registerCustomEntryTypeDoesNotAffectOtherMode[0]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:registerCustomEntryTypeDoesNotAffectOtherMode%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: registerCustomEntryTypeDoesNotAffectOtherMode[0]
]]></system-out>
</testcase>
<testcase name="assertDefaultValuesBiblatex[0]" classname="org.jabref.model.EntryTypesTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:assertDefaultValuesBiblatex%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: assertDefaultValuesBiblatex[0]
]]></system-out>
</testcase>
<testcase name="unknownTypeIsConvertedToMiscByGetTypeOrDefault[0]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:unknownTypeIsConvertedToMiscByGetTypeOrDefault%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: unknownTypeIsConvertedToMiscByGetTypeOrDefault[0]
]]></system-out>
</testcase>
<testcase name="registeredCustomizedStandardEntryTypeIsContainedInListOfCustomizedEntryTypes[0]" classname="org.jabref.model.EntryTypesTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:registeredCustomizedStandardEntryTypeIsContainedInListOfCustomizedEntryTypes%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: registeredCustomizedStandardEntryTypeIsContainedInListOfCustomizedEntryTypes[0]
]]></system-out>
</testcase>
<testcase name="standardTypeIsRestoredAfterDeletionOfOverwrittenType[0]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:standardTypeIsRestoredAfterDeletionOfOverwrittenType%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: standardTypeIsRestoredAfterDeletionOfOverwrittenType[0]
]]></system-out>
</testcase>
<testcase name="registerCustomEntryType[0]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:registerCustomEntryType%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: registerCustomEntryType[0]
]]></system-out>
</testcase>
<testcase name="overwriteStandardTypeRequiredFieldsDoesNotAffectOtherMode[0]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:overwriteStandardTypeRequiredFieldsDoesNotAffectOtherMode%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: overwriteStandardTypeRequiredFieldsDoesNotAffectOtherMode[0]
]]></system-out>
</testcase>
<testcase name="overwriteStandardTypeRequiredFields[0]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:overwriteStandardTypeRequiredFields%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: overwriteStandardTypeRequiredFields[0]
]]></system-out>
</testcase>
<testcase name="registeredCustomEntryTypeIsContainedInListOfCustomizedEntryTypes[0]" classname="org.jabref.model.EntryTypesTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:registeredCustomEntryTypeIsContainedInListOfCustomizedEntryTypes%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: registeredCustomEntryTypeIsContainedInListOfCustomizedEntryTypes[0]
]]></system-out>
</testcase>
<testcase name="overwriteCustomEntryTypeFields[0]" classname="org.jabref.model.EntryTypesTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B0%5D]/[test:overwriteCustomEntryTypeFields%5B0%5D(org.jabref.model.EntryTypesTest)]
display-name: overwriteCustomEntryTypeFields[0]
]]></system-out>
</testcase>
<testcase name="assertDefaultValuesBibtex[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:assertDefaultValuesBibtex%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: assertDefaultValuesBibtex[1]
]]></system-out>
</testcase>
<testcase name="standardTypeIsStillAcessibleIfOverwritten[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:standardTypeIsStillAcessibleIfOverwritten%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: standardTypeIsStillAcessibleIfOverwritten[1]
]]></system-out>
</testcase>
<testcase name="standardTypeCannotBeRemoved[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:standardTypeCannotBeRemoved%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: standardTypeCannotBeRemoved[1]
]]></system-out>
</testcase>
<testcase name="unknownTypeIsNotFound[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:unknownTypeIsNotFound%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: unknownTypeIsNotFound[1]
]]></system-out>
</testcase>
<testcase name="registerCustomEntryTypeDoesNotAffectOtherMode[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:registerCustomEntryTypeDoesNotAffectOtherMode%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: registerCustomEntryTypeDoesNotAffectOtherMode[1]
]]></system-out>
</testcase>
<testcase name="assertDefaultValuesBiblatex[1]" classname="org.jabref.model.EntryTypesTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:assertDefaultValuesBiblatex%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: assertDefaultValuesBiblatex[1]
]]></system-out>
</testcase>
<testcase name="unknownTypeIsConvertedToMiscByGetTypeOrDefault[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:unknownTypeIsConvertedToMiscByGetTypeOrDefault%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: unknownTypeIsConvertedToMiscByGetTypeOrDefault[1]
]]></system-out>
</testcase>
<testcase name="registeredCustomizedStandardEntryTypeIsContainedInListOfCustomizedEntryTypes[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:registeredCustomizedStandardEntryTypeIsContainedInListOfCustomizedEntryTypes%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: registeredCustomizedStandardEntryTypeIsContainedInListOfCustomizedEntryTypes[1]
]]></system-out>
</testcase>
<testcase name="standardTypeIsRestoredAfterDeletionOfOverwrittenType[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:standardTypeIsRestoredAfterDeletionOfOverwrittenType%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: standardTypeIsRestoredAfterDeletionOfOverwrittenType[1]
]]></system-out>
</testcase>
<testcase name="registerCustomEntryType[1]" classname="org.jabref.model.EntryTypesTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:registerCustomEntryType%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: registerCustomEntryType[1]
]]></system-out>
</testcase>
<testcase name="overwriteStandardTypeRequiredFieldsDoesNotAffectOtherMode[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:overwriteStandardTypeRequiredFieldsDoesNotAffectOtherMode%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: overwriteStandardTypeRequiredFieldsDoesNotAffectOtherMode[1]
]]></system-out>
</testcase>
<testcase name="overwriteStandardTypeRequiredFields[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:overwriteStandardTypeRequiredFields%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: overwriteStandardTypeRequiredFields[1]
]]></system-out>
</testcase>
<testcase name="registeredCustomEntryTypeIsContainedInListOfCustomizedEntryTypes[1]" classname="org.jabref.model.EntryTypesTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:registeredCustomEntryTypeIsContainedInListOfCustomizedEntryTypes%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: registeredCustomEntryTypeIsContainedInListOfCustomizedEntryTypes[1]
]]></system-out>
</testcase>
<testcase name="overwriteCustomEntryTypeFields[1]" classname="org.jabref.model.EntryTypesTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.EntryTypesTest]/[test:%5B1%5D]/[test:overwriteCustomEntryTypeFields%5B1%5D(org.jabref.model.EntryTypesTest)]
display-name: overwriteCustomEntryTypeFields[1]
]]></system-out>
</testcase>
<testcase name="parseCorrectly[0: parse(Doe, John)=[Author{firstPart='John', firstAbbr='J.', vonPart='null', lastPart='Doe', jrPart='null'}]]" classname="org.jabref.model.entry.AuthorListParameterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.entry.AuthorListParameterTest]/[test:%5B0%3A parse(Doe, John)=%5BAuthor{firstPart='John', firstAbbr='J.', vonPart='null', lastPart='Doe', jrPart='null'}%5D%5D]/[test:parseCorrectly%5B0%3A parse(Doe, John)=%5BAuthor{firstPart='John', firstAbbr='J.', vonPart='null', lastPart='Doe', jrPart='null'}%5D%5D(org.jabref.model.entry.AuthorListParameterTest)]
display-name: parseCorrectly[0: parse(Doe, John)=[Author{firstPart='John', firstAbbr='J.', vonPart='null', lastPart='Doe', jrPart='null'}]]
]]></system-out>
</testcase>
<testcase name="parseCorrectly[1: parse(von Berlichingen zu Hornberg, Johann Gottfried)=[Author{firstPart='Johann Gottfried', firstAbbr='J. G.', vonPart='von', lastPart='Berlichingen zu Hornberg', jrPart='null'}]]" classname="org.jabref.model.entry.AuthorListParameterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.entry.AuthorListParameterTest]/[test:%5B1%3A parse(von Berlichingen zu Hornberg, Johann Gottfried)=%5BAuthor{firstPart='Johann Gottfried', firstAbbr='J. G.', vonPart='von', lastPart='Berlichingen zu Hornberg', jrPart='null'}%5D%5D]/[test:parseCorrectly%5B1%3A parse(von Berlichingen zu Hornberg, Johann Gottfried)=%5BAuthor{firstPart='Johann Gottfried', firstAbbr='J. G.', vonPart='von', lastPart='Berlichingen zu Hornberg', jrPart='null'}%5D%5D(org.jabref.model.entry.AuthorListParameterTest)]
display-name: parseCorrectly[1: parse(von Berlichingen zu Hornberg, Johann Gottfried)=[Author{firstPart='Johann Gottfried', firstAbbr='J. G.', vonPart='von', lastPart='Berlichingen zu Hornberg', jrPart='null'}]]
]]></system-out>
</testcase>
<testcase name="parseCorrectly[2: parse(de la Vallée Poussin, Jean Charles Gabriel)=[Author{firstPart='Jean Charles Gabriel', firstAbbr='J. C. G.', vonPart='de la', lastPart='Vallée Poussin', jrPart='null'}]]" classname="org.jabref.model.entry.AuthorListParameterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.entry.AuthorListParameterTest]/[test:%5B2%3A parse(de la Vallée Poussin, Jean Charles Gabriel)=%5BAuthor{firstPart='Jean Charles Gabriel', firstAbbr='J. C. G.', vonPart='de la', lastPart='Vallée Poussin', jrPart='null'}%5D%5D]/[test:parseCorrectly%5B2%3A parse(de la Vallée Poussin, Jean Charles Gabriel)=%5BAuthor{firstPart='Jean Charles Gabriel', firstAbbr='J. C. G.', vonPart='de la', lastPart='Vallée Poussin', jrPart='null'}%5D%5D(org.jabref.model.entry.AuthorListParameterTest)]
display-name: parseCorrectly[2: parse(de la Vallée Poussin, Jean Charles Gabriel)=[Author{firstPart='Jean Charles Gabriel', firstAbbr='J. C. G.', vonPart='de la', lastPart='Vallée Poussin', jrPart='null'}]]
]]></system-out>
</testcase>
<testcase name="parseCorrectly[3: parse(de la Vallée Poussin, J. C. G.)=[Author{firstPart='J. C. G.', firstAbbr='J. C. G.', vonPart='de la', lastPart='Vallée Poussin', jrPart='null'}]]" classname="org.jabref.model.entry.AuthorListParameterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.entry.AuthorListParameterTest]/[test:%5B3%3A parse(de la Vallée Poussin, J. C. G.)=%5BAuthor{firstPart='J. C. G.', firstAbbr='J. C. G.', vonPart='de la', lastPart='Vallée Poussin', jrPart='null'}%5D%5D]/[test:parseCorrectly%5B3%3A parse(de la Vallée Poussin, J. C. G.)=%5BAuthor{firstPart='J. C. G.', firstAbbr='J. C. G.', vonPart='de la', lastPart='Vallée Poussin', jrPart='null'}%5D%5D(org.jabref.model.entry.AuthorListParameterTest)]
display-name: parseCorrectly[3: parse(de la Vallée Poussin, J. C. G.)=[Author{firstPart='J. C. G.', firstAbbr='J. C. G.', vonPart='de la', lastPart='Vallée Poussin', jrPart='null'}]]
]]></system-out>
</testcase>
<testcase name="parseCorrectly[4: parse({K}ent-{B}oswell, E. S.)=[Author{firstPart='E. S.', firstAbbr='E. S.', vonPart='null', lastPart='{K}ent-{B}oswell', jrPart='null'}]]" classname="org.jabref.model.entry.AuthorListParameterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.model.entry.AuthorListParameterTest]/[test:%5B4%3A parse({K}ent-{B}oswell, E. S.)=%5BAuthor{firstPart='E. S.', firstAbbr='E. S.', vonPart='null', lastPart='{K}ent-{B}oswell', jrPart='null'}%5D%5D]/[test:parseCorrectly%5B4%3A parse({K}ent-{B}oswell, E. S.)=%5BAuthor{firstPart='E. S.', firstAbbr='E. S.', vonPart='null', lastPart='{K}ent-{B}oswell', jrPart='null'}%5D%5D(org.jabref.model.entry.AuthorListParameterTest)]
display-name: parseCorrectly[4: parse({K}ent-{B}oswell, E. S.)=[Author{firstPart='E. S.', firstAbbr='E. S.', vonPart='null', lastPart='{K}ent-{B}oswell', jrPart='null'}]]
]]></system-out>
</testcase>
<testcase name="deleteWhenDialogCancelledReturnsFalse" classname="org.jabref.gui.fieldeditors.LinkedFileViewModelTest" time="0.446">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.fieldeditors.LinkedFileViewModelTest]/[test:deleteWhenDialogCancelledReturnsFalse(org.jabref.gui.fieldeditors.LinkedFileViewModelTest)]
display-name: deleteWhenDialogCancelledReturnsFalse
]]></system-out>
</testcase>
<testcase name="deleteWhenDeleteChosenAndFileMissingReturnsFalse" classname="org.jabref.gui.fieldeditors.LinkedFileViewModelTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.fieldeditors.LinkedFileViewModelTest]/[test:deleteWhenDeleteChosenAndFileMissingReturnsFalse(org.jabref.gui.fieldeditors.LinkedFileViewModelTest)]
display-name: deleteWhenDeleteChosenAndFileMissingReturnsFalse
]]></system-out>
</testcase>
<testcase name="deleteWhenFilePathNotPresentReturnsTrue" classname="org.jabref.gui.fieldeditors.LinkedFileViewModelTest" time="0.055">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.fieldeditors.LinkedFileViewModelTest]/[test:deleteWhenFilePathNotPresentReturnsTrue(org.jabref.gui.fieldeditors.LinkedFileViewModelTest)]
display-name: deleteWhenFilePathNotPresentReturnsTrue
]]></system-out>
</testcase>
<testcase name="deleteWhenRemoveChosenReturnsTrue" classname="org.jabref.gui.fieldeditors.LinkedFileViewModelTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.fieldeditors.LinkedFileViewModelTest]/[test:deleteWhenRemoveChosenReturnsTrue(org.jabref.gui.fieldeditors.LinkedFileViewModelTest)]
display-name: deleteWhenRemoveChosenReturnsTrue
]]></system-out>
</testcase>
<testcase name="deleteWhenDeleteChosenReturnsTrueAndDeletesFile" classname="org.jabref.gui.fieldeditors.LinkedFileViewModelTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.fieldeditors.LinkedFileViewModelTest]/[test:deleteWhenDeleteChosenReturnsTrueAndDeletesFile(org.jabref.gui.fieldeditors.LinkedFileViewModelTest)]
display-name: deleteWhenDeleteChosenReturnsTrueAndDeletesFile
]]></system-out>
</testcase>
<testcase name="switchingFromSourceTabDoesNotThrowException" classname="org.jabref.gui.entryeditor.EntryEditorTest" time="16.787">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.entryeditor.EntryEditorTest]/[test:switchingFromSourceTabDoesNotThrowException(org.jabref.gui.entryeditor.EntryEditorTest)]
display-name: switchingFromSourceTabDoesNotThrowException
]]></system-out>
</testcase>
<testcase name="testOpenDuplicatedFileResultsInAnException" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="3.939">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testOpenDuplicatedFileResultsInAnException(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testOpenDuplicatedFileResultsInAnException
]]></system-out>
</testcase>
<testcase name="testInitialHasNoFilesAndNoAbbreviations" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.55">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testInitialHasNoFilesAndNoAbbreviations(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testInitialHasNoFilesAndNoAbbreviations
]]></system-out>
</testcase>
<testcase name="testOpenValidFileContainsTheSpecificEntryAndEnoughAbbreviations" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.732">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testOpenValidFileContainsTheSpecificEntryAndEnoughAbbreviations(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testOpenValidFileContainsTheSpecificEntryAndEnoughAbbreviations
]]></system-out>
</testcase>
<testcase name="testSaveExternalFilesListToPreferences" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.778">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testSaveExternalFilesListToPreferences(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testSaveExternalFilesListToPreferences
]]></system-out>
</testcase>
<testcase name="testAddDuplicatedAbbreviationResultsInException" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.785">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testAddDuplicatedAbbreviationResultsInException(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testAddDuplicatedAbbreviationResultsInException
]]></system-out>
</testcase>
<testcase name="testMixedFileUsage" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.49">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testMixedFileUsage(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testMixedFileUsage
]]></system-out>
</testcase>
<testcase name="testInitialWithSavedFilesIncrementsFilesCounter" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.418">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testInitialWithSavedFilesIncrementsFilesCounter(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testInitialWithSavedFilesIncrementsFilesCounter
]]></system-out>
</testcase>
<testcase name="testRemoveLastListSetsCurrentFileAndCurrentAbbreviationToNull" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.314">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testRemoveLastListSetsCurrentFileAndCurrentAbbreviationToNull(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testRemoveLastListSetsCurrentFileAndCurrentAbbreviationToNull
]]></system-out>
</testcase>
<testcase name="testSaveAbbreviationsToFilesCreatesNewFilesWithWrittenAbbreviations" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.781">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testSaveAbbreviationsToFilesCreatesNewFilesWithWrittenAbbreviations(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testSaveAbbreviationsToFilesCreatesNewFilesWithWrittenAbbreviations
]]></system-out>
</testcase>
<testcase name="testDeleteAbbreviationSelectsNextOne" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.657">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testDeleteAbbreviationSelectsNextOne(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testDeleteAbbreviationSelectsNextOne
]]></system-out>
</testcase>
<testcase name="testEditAbbreviationToEmptyNameResultsInException" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="1.014">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testEditAbbreviationToEmptyNameResultsInException(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testEditAbbreviationToEmptyNameResultsInException
]]></system-out>
</testcase>
<testcase name="testSelectLastJournalFileSwitchesFilesAndTheirAbbreviations" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.011">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testSelectLastJournalFileSwitchesFilesAndTheirAbbreviations(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testSelectLastJournalFileSwitchesFilesAndTheirAbbreviations
]]></system-out>
</testcase>
<testcase name="testEditAbbreviationToEmptyAbbreviationResultsInException" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.067">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testEditAbbreviationToEmptyAbbreviationResultsInException(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testEditAbbreviationToEmptyAbbreviationResultsInException
]]></system-out>
</testcase>
<testcase name="testEditAbbreviationToExistingOneResultsInException" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testEditAbbreviationToExistingOneResultsInException(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testEditAbbreviationToExistingOneResultsInException
]]></system-out>
</testcase>
<testcase name="testcurrentFilePropertyChangeActiveFile" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.079">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testcurrentFilePropertyChangeActiveFile(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testcurrentFilePropertyChangeActiveFile
]]></system-out>
</testcase>
<testcase name="testEditAbbreviationIncludesNewAbbreviationInAbbreviationsList" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testEditAbbreviationIncludesNewAbbreviationInAbbreviationsList(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testEditAbbreviationIncludesNewAbbreviationInAbbreviationsList
]]></system-out>
</testcase>
<testcase name="testRemoveDuplicatesWhenReadingFiles" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.38">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testRemoveDuplicatesWhenReadingFiles(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testRemoveDuplicatesWhenReadingFiles
]]></system-out>
</testcase>
<testcase name="testEditSameAbbreviationWithNoChangeDoesNotResultInException" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.154">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testEditSameAbbreviationWithNoChangeDoesNotResultInException(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testEditSameAbbreviationWithNoChangeDoesNotResultInException
]]></system-out>
</testcase>
<testcase name="testDeleteAbbreviationSelectsPreviousOne" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.266">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testDeleteAbbreviationSelectsPreviousOne(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testDeleteAbbreviationSelectsPreviousOne
]]></system-out>
</testcase>
<testcase name="testBuiltInListsStandardIEEEIncludesAllBuiltIEEEAbbreviations" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.526">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testBuiltInListsStandardIEEEIncludesAllBuiltIEEEAbbreviations(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testBuiltInListsStandardIEEEIncludesAllBuiltIEEEAbbreviations
]]></system-out>
</testcase>
<testcase name="addDuplicatedFileResultsInErrorDialog" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="1.038">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:addDuplicatedFileResultsInErrorDialog(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: addDuplicatedFileResultsInErrorDialog
]]></system-out>
</testcase>
<testcase name="addFileIncreasesCounterOfOpenFilesAndHasNoAbbreviations" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.504">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:addFileIncreasesCounterOfOpenFilesAndHasNoAbbreviations(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: addFileIncreasesCounterOfOpenFilesAndHasNoAbbreviations
]]></system-out>
</testcase>
<testcase name="testAddAbbreviationIncludesAbbreviationsInAbbreviationList" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.264">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testAddAbbreviationIncludesAbbreviationsInAbbreviationList(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testAddAbbreviationIncludesAbbreviationsInAbbreviationList
]]></system-out>
</testcase>
<testcase name="testBuiltInListsIncludeAllBuiltInAbbreviations" classname="org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest" time="0.463">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest]/[test:testBuiltInListsIncludeAllBuiltInAbbreviations(org.jabref.gui.journals.ManageJournalAbbreviationsViewModelTest)]
display-name: testBuiltInListsIncludeAllBuiltInAbbreviations
]]></system-out>
</testcase>
<testcase name="test" classname="org.jabref.gui.externalfiles.AutoSetFileLinksUtilTest" time="0.49">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.externalfiles.AutoSetFileLinksUtilTest]/[test:test(org.jabref.gui.externalfiles.AutoSetFileLinksUtilTest)]
display-name: test
]]></system-out>
</testcase>
<testcase name="testWithNullStringDirectory" classname="org.jabref.gui.util.FileDialogConfigurationTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.util.FileDialogConfigurationTest]/[test:testWithNullStringDirectory(org.jabref.gui.util.FileDialogConfigurationTest)]
display-name: testWithNullStringDirectory
]]></system-out>
</testcase>
<testcase name="testWithValidDirectoryString" classname="org.jabref.gui.util.FileDialogConfigurationTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.util.FileDialogConfigurationTest]/[test:testWithValidDirectoryString(org.jabref.gui.util.FileDialogConfigurationTest)]
display-name: testWithValidDirectoryString
]]></system-out>
</testcase>
<testcase name="testWithNonExistingDirectoryAndParentNull" classname="org.jabref.gui.util.FileDialogConfigurationTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.util.FileDialogConfigurationTest]/[test:testWithNonExistingDirectoryAndParentNull(org.jabref.gui.util.FileDialogConfigurationTest)]
display-name: testWithNonExistingDirectoryAndParentNull
]]></system-out>
</testcase>
<testcase name="testMultipleExtension" classname="org.jabref.gui.util.FileDialogConfigurationTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.util.FileDialogConfigurationTest]/[test:testMultipleExtension(org.jabref.gui.util.FileDialogConfigurationTest)]
display-name: testMultipleExtension
]]></system-out>
</testcase>
<testcase name="testSingleExtension" classname="org.jabref.gui.util.FileDialogConfigurationTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.util.FileDialogConfigurationTest]/[test:testSingleExtension(org.jabref.gui.util.FileDialogConfigurationTest)]
display-name: testSingleExtension
]]></system-out>
</testcase>
<testcase name="testWithNullPathDirectory" classname="org.jabref.gui.util.FileDialogConfigurationTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.util.FileDialogConfigurationTest]/[test:testWithNullPathDirectory(org.jabref.gui.util.FileDialogConfigurationTest)]
display-name: testWithNullPathDirectory
]]></system-out>
</testcase>
<testcase name="testWithValidDirectoryPath" classname="org.jabref.gui.util.FileDialogConfigurationTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.gui.util.FileDialogConfigurationTest]/[test:testWithValidDirectoryPath(org.jabref.gui.util.FileDialogConfigurationTest)]
display-name: testWithValidDirectoryPath
]]></system-out>
</testcase>
<testcase name="testReadEmtpyMetadata" classname="org.jabref.logic.xmp.XmpUtilReaderTest" time="0.285">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.xmp.XmpUtilReaderTest]/[test:testReadEmtpyMetadata(org.jabref.logic.xmp.XmpUtilReaderTest)]
display-name: testReadEmtpyMetadata
]]></system-out>
</testcase>
<testcase name="testReadArticleDublinCoreReadRawXmp" classname="org.jabref.logic.xmp.XmpUtilReaderTest" time="0.188">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.xmp.XmpUtilReaderTest]/[test:testReadArticleDublinCoreReadRawXmp(org.jabref.logic.xmp.XmpUtilReaderTest)]
display-name: testReadArticleDublinCoreReadRawXmp
]]></system-out>
</testcase>
<testcase name="testReadArticleDublinCoreReadXmp" classname="org.jabref.logic.xmp.XmpUtilReaderTest" time="0.023">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.xmp.XmpUtilReaderTest]/[test:testReadArticleDublinCoreReadXmp(org.jabref.logic.xmp.XmpUtilReaderTest)]
display-name: testReadArticleDublinCoreReadXmp
]]></system-out>
</testcase>
<testcase name="testReadPDMetadata" classname="org.jabref.logic.xmp.XmpUtilReaderTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.xmp.XmpUtilReaderTest]/[test:testReadPDMetadata(org.jabref.logic.xmp.XmpUtilReaderTest)]
display-name: testReadPDMetadata
]]></system-out>
</testcase>
<testcase name="testWriteXmp" classname="org.jabref.logic.xmp.XmpUtilWriterTest" time="0.233">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.xmp.XmpUtilWriterTest]/[test:testWriteXmp(org.jabref.logic.xmp.XmpUtilWriterTest)]
display-name: testWriteXmp
]]></system-out>
</testcase>
<testcase name="testWriteMultipleBibEntries" classname="org.jabref.logic.xmp.XmpUtilWriterTest" time="0.475">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.xmp.XmpUtilWriterTest]/[test:testWriteMultipleBibEntries(org.jabref.logic.xmp.XmpUtilWriterTest)]
display-name: testWriteMultipleBibEntries
]]></system-out>
</testcase>
<testcase name="cleanupRenamePdfRenamesFileInSameFolder" classname="org.jabref.logic.cleanup.RenamePdfCleanupTest" time="0.252">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.RenamePdfCleanupTest]/[test:cleanupRenamePdfRenamesFileInSameFolder(org.jabref.logic.cleanup.RenamePdfCleanupTest)]
display-name: cleanupRenamePdfRenamesFileInSameFolder
]]></system-out>
</testcase>
<testcase name="cleanupRenamePdfRenamesFileStartingWithBibtexKey" classname="org.jabref.logic.cleanup.RenamePdfCleanupTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.RenamePdfCleanupTest]/[test:cleanupRenamePdfRenamesFileStartingWithBibtexKey(org.jabref.logic.cleanup.RenamePdfCleanupTest)]
display-name: cleanupRenamePdfRenamesFileStartingWithBibtexKey
]]></system-out>
</testcase>
<testcase name="cleanupRenamePdfRenamesWithMultipleFiles" classname="org.jabref.logic.cleanup.RenamePdfCleanupTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.RenamePdfCleanupTest]/[test:cleanupRenamePdfRenamesWithMultipleFiles(org.jabref.logic.cleanup.RenamePdfCleanupTest)]
display-name: cleanupRenamePdfRenamesWithMultipleFiles
]]></system-out>
</testcase>
<testcase name="cleanupRenamePdfRenamesFileEvenIfOnlyDifferenceIsCase" classname="org.jabref.logic.cleanup.RenamePdfCleanupTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.RenamePdfCleanupTest]/[test:cleanupRenamePdfRenamesFileEvenIfOnlyDifferenceIsCase(org.jabref.logic.cleanup.RenamePdfCleanupTest)]
display-name: cleanupRenamePdfRenamesFileEvenIfOnlyDifferenceIsCase
]]></system-out>
</testcase>
<testcase name="cleanupGetTargetFilename" classname="org.jabref.logic.cleanup.RenamePdfCleanupTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.RenamePdfCleanupTest]/[test:cleanupGetTargetFilename(org.jabref.logic.cleanup.RenamePdfCleanupTest)]
display-name: cleanupGetTargetFilename
]]></system-out>
</testcase>
<testcase name="cleanupSingleField" classname="org.jabref.logic.cleanup.RenamePdfCleanupTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.RenamePdfCleanupTest]/[test:cleanupSingleField(org.jabref.logic.cleanup.RenamePdfCleanupTest)]
display-name: cleanupSingleField
]]></system-out>
</testcase>
<testcase name="movesFileFromSubfolderMultiple" classname="org.jabref.logic.cleanup.MoveFilesCleanupTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.MoveFilesCleanupTest]/[test:movesFileFromSubfolderMultiple(org.jabref.logic.cleanup.MoveFilesCleanupTest)]
display-name: movesFileFromSubfolderMultiple
]]></system-out>
</testcase>
<testcase name="movesFileFromSubfolderWithSubdirPattern" classname="org.jabref.logic.cleanup.MoveFilesCleanupTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.MoveFilesCleanupTest]/[test:movesFileFromSubfolderWithSubdirPattern(org.jabref.logic.cleanup.MoveFilesCleanupTest)]
display-name: movesFileFromSubfolderWithSubdirPattern
]]></system-out>
</testcase>
<testcase name="movesFileFromSubfolderWithFileDirPattern" classname="org.jabref.logic.cleanup.MoveFilesCleanupTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.MoveFilesCleanupTest]/[test:movesFileFromSubfolderWithFileDirPattern(org.jabref.logic.cleanup.MoveFilesCleanupTest)]
display-name: movesFileFromSubfolderWithFileDirPattern
]]></system-out>
</testcase>
<testcase name="movesFileFromSubfolderWithDeepSubdirPattern" classname="org.jabref.logic.cleanup.MoveFilesCleanupTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.MoveFilesCleanupTest]/[test:movesFileFromSubfolderWithDeepSubdirPattern(org.jabref.logic.cleanup.MoveFilesCleanupTest)]
display-name: movesFileFromSubfolderWithDeepSubdirPattern
]]></system-out>
</testcase>
<testcase name="movesFileFromSubfolder" classname="org.jabref.logic.cleanup.MoveFilesCleanupTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.MoveFilesCleanupTest]/[test:movesFileFromSubfolder(org.jabref.logic.cleanup.MoveFilesCleanupTest)]
display-name: movesFileFromSubfolder
]]></system-out>
</testcase>
<testcase name="cleanupMonthChangesNumberToBibtex" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupMonthChangesNumberToBibtex(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupMonthChangesNumberToBibtex
]]></system-out>
</testcase>
<testcase name="upgradeExternalLinksMoveFromPdfToFile" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:upgradeExternalLinksMoveFromPdfToFile(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: upgradeExternalLinksMoveFromPdfToFile
]]></system-out>
</testcase>
<testcase name="cleanupDoiRemovesLeadingHttp" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupDoiRemovesLeadingHttp(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupDoiRemovesLeadingHttp
]]></system-out>
</testcase>
<testcase name="convertToBiblatexMovesAddressToLocation" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:convertToBiblatexMovesAddressToLocation(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: convertToBiblatexMovesAddressToLocation
]]></system-out>
</testcase>
<testcase name="cleanupWithDisabledFieldFormatterChangesNothing" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupWithDisabledFieldFormatterChangesNothing(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupWithDisabledFieldFormatterChangesNothing
]]></system-out>
</testcase>
<testcase name="cleanupFixFileLinksMovesSingleDescriptionToLink" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupFixFileLinksMovesSingleDescriptionToLink(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupFixFileLinksMovesSingleDescriptionToLink
]]></system-out>
</testcase>
<testcase name="cleanupLatexMergesTwoLatexMathEnvironments" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupLatexMergesTwoLatexMathEnvironments(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupLatexMergesTwoLatexMathEnvironments
]]></system-out>
</testcase>
<testcase name="cleanupWithNullPresetThrowsException" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupWithNullPresetThrowsException(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupWithNullPresetThrowsException
]]></system-out>
</testcase>
<testcase name="convertToBiblatexMovesJournalToJournalTitle" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:convertToBiblatexMovesJournalToJournalTitle(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: convertToBiblatexMovesJournalToJournalTitle
]]></system-out>
</testcase>
<testcase name="cleanupRenamePdfRenamesRelativeFile" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupRenamePdfRenamesRelativeFile(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupRenamePdfRenamesRelativeFile
]]></system-out>
</testcase>
<testcase name="cleanupDoiReturnsChanges" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupDoiReturnsChanges(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupDoiReturnsChanges
]]></system-out>
</testcase>
<testcase name="cleanupDatesConvertsToCorrectFormat" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupDatesConvertsToCorrectFormat(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupDatesConvertsToCorrectFormat
]]></system-out>
</testcase>
<testcase name="cleanupRelativePathsConvertAbsoluteToRelativePath" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupRelativePathsConvertAbsoluteToRelativePath(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupRelativePathsConvertAbsoluteToRelativePath
]]></system-out>
</testcase>
<testcase name="cleanupNullEntryThrowsException" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupNullEntryThrowsException(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupNullEntryThrowsException
]]></system-out>
</testcase>
<testcase name="cleanupHtmlToLatexConvertsEpsilonToLatex" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupHtmlToLatexConvertsEpsilonToLatex(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupHtmlToLatexConvertsEpsilonToLatex
]]></system-out>
</testcase>
<testcase name="cleanupDoiReturnsChangeWhenDoiInURLField" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupDoiReturnsChangeWhenDoiInURLField(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupDoiReturnsChangeWhenDoiInURLField
]]></system-out>
</testcase>
<testcase name="cleanupMoveFilesMovesFileFromSubfolder" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupMoveFilesMovesFileFromSubfolder(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupMoveFilesMovesFileFromSubfolder
]]></system-out>
</testcase>
<testcase name="cleanupUnitsConvertsOneAmpereToLatex" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupUnitsConvertsOneAmpereToLatex(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupUnitsConvertsOneAmpereToLatex
]]></system-out>
</testcase>
<testcase name="upgradeExternalLinksMoveFromPsToFile" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:upgradeExternalLinksMoveFromPsToFile(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: upgradeExternalLinksMoveFromPsToFile
]]></system-out>
</testcase>
<testcase name="cleanupDoesNothingByDefault" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupDoesNothingByDefault(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupDoesNothingByDefault
]]></system-out>
</testcase>
<testcase name="cleanupCasesAddsBracketAroundAluminiumGalliumArsenid" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.011">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupCasesAddsBracketAroundAluminiumGalliumArsenid(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupCasesAddsBracketAroundAluminiumGalliumArsenid
]]></system-out>
</testcase>
<testcase name="cleanupDoiFindsDoiInURLFieldAndMoveItToDOIField" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupDoiFindsDoiInURLFieldAndMoveItToDOIField(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupDoiFindsDoiInURLFieldAndMoveItToDOIField
]]></system-out>
</testcase>
<testcase name="cleanupPageNumbersConvertsSingleDashToDouble" classname="org.jabref.logic.cleanup.CleanupWorkerTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.cleanup.CleanupWorkerTest]/[test:cleanupPageNumbersConvertsSingleDashToDouble(org.jabref.logic.cleanup.CleanupWorkerTest)]
display-name: cleanupPageNumbersConvertsSingleDashToDouble
]]></system-out>
</testcase>
<testcase name="addSearchListenerNotifiesRegisteredListener" classname="org.jabref.logic.search.SearchQueryHighlightObservableTest" time="0.007">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.search.SearchQueryHighlightObservableTest]/[test:addSearchListenerNotifiesRegisteredListener(org.jabref.logic.search.SearchQueryHighlightObservableTest)]
display-name: addSearchListenerNotifiesRegisteredListener
]]></system-out>
</testcase>
<testcase name="addSearchListenerNotifiesListenerAboutPreviousPattern" classname="org.jabref.logic.search.SearchQueryHighlightObservableTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.search.SearchQueryHighlightObservableTest]/[test:addSearchListenerNotifiesListenerAboutPreviousPattern(org.jabref.logic.search.SearchQueryHighlightObservableTest)]
display-name: addSearchListenerNotifiesListenerAboutPreviousPattern
]]></system-out>
</testcase>
<testcase name="addSearchListenerNotifiesRegisteredListenerAboutGrammarBasedSearches" classname="org.jabref.logic.search.SearchQueryHighlightObservableTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.search.SearchQueryHighlightObservableTest]/[test:addSearchListenerNotifiesRegisteredListenerAboutGrammarBasedSearches(org.jabref.logic.search.SearchQueryHighlightObservableTest)]
display-name: addSearchListenerNotifiesRegisteredListenerAboutGrammarBasedSearches
]]></system-out>
</testcase>
<testcase name="testNotEnabledByDefault" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testNotEnabledByDefault(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testNotEnabledByDefault
]]></system-out>
</testcase>
<testcase name="testCanAddTermToExternalList" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testCanAddTermToExternalList(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testCanAddTermToExternalList
]]></system-out>
</testcase>
<testcase name="testSetEnabledIsEnabled" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testSetEnabledIsEnabled(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testSetEnabledIsEnabled
]]></system-out>
</testcase>
<testcase name="testGetLocation" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testGetLocation(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testGetLocation
]]></system-out>
</testcase>
<testcase name="testTermAddedToExternalList" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testTermAddedToExternalList(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testTermAddedToExternalList
]]></system-out>
</testcase>
<testcase name="testCompareTo" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testCompareTo(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testCompareTo
]]></system-out>
</testcase>
<testcase name="testProtectedTermsListStringListOfStringStringBoolean" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testProtectedTermsListStringListOfStringStringBoolean(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testProtectedTermsListStringListOfStringStringBoolean
]]></system-out>
</testcase>
<testcase name="testTermNotAddedToInternalList" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testTermNotAddedToInternalList(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testTermNotAddedToInternalList
]]></system-out>
</testcase>
<testcase name="testGetTermList" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testGetTermList(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testGetTermList
]]></system-out>
</testcase>
<testcase name="testGetTermListing" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testGetTermListing(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testGetTermListing
]]></system-out>
</testcase>
<testcase name="testGetDescription" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testGetDescription(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testGetDescription
]]></system-out>
</testcase>
<testcase name="testProtectedTermsListStringListOfStringString" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testProtectedTermsListStringListOfStringString(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testProtectedTermsListStringListOfStringString
]]></system-out>
</testcase>
<testcase name="testCanNotAddTermToInternalList" classname="org.jabref.logic.protectedterms.ProtectedTermsListTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsListTest]/[test:testCanNotAddTermToInternalList(org.jabref.logic.protectedterms.ProtectedTermsListTest)]
display-name: testCanNotAddTermToInternalList
]]></system-out>
</testcase>
<testcase name="testGetProtectedTerms" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testGetProtectedTerms(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testGetProtectedTerms
]]></system-out>
</testcase>
<testcase name="testInitalizedAllInternalDisabled" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testInitalizedAllInternalDisabled(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testInitalizedAllInternalDisabled
]]></system-out>
</testcase>
<testcase name="testNewListsAreEnabled" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testNewListsAreEnabled(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testNewListsAreEnabled
]]></system-out>
</testcase>
<testcase name="testUnknownExternalFileWillNotLoad" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testUnknownExternalFileWillNotLoad(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testUnknownExternalFileWillNotLoad
]]></system-out>
</testcase>
<testcase name="testAddNewTermListAddsList" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testAddNewTermListAddsList(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testAddNewTermListAddsList
]]></system-out>
</testcase>
<testcase name="testAllDisabledNoWords" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testAllDisabledNoWords(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testAllDisabledNoWords
]]></system-out>
</testcase>
<testcase name="testReadProtectedTermsListFromFileEnabledWorks" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testReadProtectedTermsListFromFileEnabledWorks(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testReadProtectedTermsListFromFileEnabledWorks
]]></system-out>
</testcase>
<testcase name="testNewListsAreIncluded" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testNewListsAreIncluded(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testNewListsAreIncluded
]]></system-out>
</testcase>
<testcase name="testDoNotLoadTheSameInternalListTwice" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testDoNotLoadTheSameInternalListTwice(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testDoNotLoadTheSameInternalListTwice
]]></system-out>
</testcase>
<testcase name="testRemoveTermList" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testRemoveTermList(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testRemoveTermList
]]></system-out>
</testcase>
<testcase name="testReadProtectedTermsListFromFileReadsDescription" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testReadProtectedTermsListFromFileReadsDescription(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testReadProtectedTermsListFromFileReadsDescription
]]></system-out>
</testcase>
<testcase name="testAddNewTermListSetsCorrectDescription" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testAddNewTermListSetsCorrectDescription(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testAddNewTermListSetsCorrectDescription
]]></system-out>
</testcase>
<testcase name="testReadProtectedTermsListFromFileIsNotInternalList" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testReadProtectedTermsListFromFileIsNotInternalList(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testReadProtectedTermsListFromFileIsNotInternalList
]]></system-out>
</testcase>
<testcase name="testAddNewTermListNewListInList" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testAddNewTermListNewListInList(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testAddNewTermListNewListInList
]]></system-out>
</testcase>
<testcase name="testRemoveTermListReduceTheCount" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testRemoveTermListReduceTheCount(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testRemoveTermListReduceTheCount
]]></system-out>
</testcase>
<testcase name="testAddProtectedTermsListFromFile" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testAddProtectedTermsListFromFile(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testAddProtectedTermsListFromFile
]]></system-out>
</testcase>
<testcase name="testReadProtectedTermsListFromFileDisabledWorks" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testReadProtectedTermsListFromFileDisabledWorks(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testReadProtectedTermsListFromFileDisabledWorks
]]></system-out>
</testcase>
<testcase name="testReadProtectedTermsListFromFileNoDescriptionGivesDefaultDescription" classname="org.jabref.logic.protectedterms.ProtectedTermsLoaderTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.protectedterms.ProtectedTermsLoaderTest]/[test:testReadProtectedTermsListFromFileNoDescriptionGivesDefaultDescription(org.jabref.logic.protectedterms.ProtectedTermsLoaderTest)]
display-name: testReadProtectedTermsListFromFileNoDescriptionGivesDefaultDescription
]]></system-out>
</testcase>
<testcase name="underscoreIsPreserved" classname="org.jabref.logic.l10n.LocalizationKeyTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.l10n.LocalizationKeyTest]/[test:underscoreIsPreserved(org.jabref.logic.l10n.LocalizationKeyTest)]
display-name: underscoreIsPreserved
]]></system-out>
</testcase>
<testcase name="testConversionToPropertiesKey" classname="org.jabref.logic.l10n.LocalizationKeyTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.l10n.LocalizationKeyTest]/[test:testConversionToPropertiesKey(org.jabref.logic.l10n.LocalizationKeyTest)]
display-name: testConversionToPropertiesKey
]]></system-out>
</testcase>
<testcase name="testCitationEntryInitalPageInfo" classname="org.jabref.logic.openoffice.CitationEntryTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.openoffice.CitationEntryTest]/[test:testCitationEntryInitalPageInfo(org.jabref.logic.openoffice.CitationEntryTest)]
display-name: testCitationEntryInitalPageInfo
]]></system-out>
</testcase>
<testcase name="testCitationEntryOptionalInitalPageInfo" classname="org.jabref.logic.openoffice.CitationEntryTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.openoffice.CitationEntryTest]/[test:testCitationEntryOptionalInitalPageInfo(org.jabref.logic.openoffice.CitationEntryTest)]
display-name: testCitationEntryOptionalInitalPageInfo
]]></system-out>
</testcase>
<testcase name="testCitationEntryEquals" classname="org.jabref.logic.openoffice.CitationEntryTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.openoffice.CitationEntryTest]/[test:testCitationEntryEquals(org.jabref.logic.openoffice.CitationEntryTest)]
display-name: testCitationEntryEquals
]]></system-out>
</testcase>
<testcase name="testCitationEntryNoInitalPageInfoChanged" classname="org.jabref.logic.openoffice.CitationEntryTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.openoffice.CitationEntryTest]/[test:testCitationEntryNoInitalPageInfoChanged(org.jabref.logic.openoffice.CitationEntryTest)]
display-name: testCitationEntryNoInitalPageInfoChanged
]]></system-out>
</testcase>
<testcase name="testCitationEntryNoInitalPageInfo" classname="org.jabref.logic.openoffice.CitationEntryTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.openoffice.CitationEntryTest]/[test:testCitationEntryNoInitalPageInfo(org.jabref.logic.openoffice.CitationEntryTest)]
display-name: testCitationEntryNoInitalPageInfo
]]></system-out>
</testcase>
<testcase name="testCitationEntryInitalPageInfoChanged" classname="org.jabref.logic.openoffice.CitationEntryTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.openoffice.CitationEntryTest]/[test:testCitationEntryInitalPageInfoChanged(org.jabref.logic.openoffice.CitationEntryTest)]
display-name: testCitationEntryInitalPageInfoChanged
]]></system-out>
</testcase>
<testcase name="testCitationEntryCompareTo" classname="org.jabref.logic.openoffice.CitationEntryTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.openoffice.CitationEntryTest]/[test:testCitationEntryCompareTo(org.jabref.logic.openoffice.CitationEntryTest)]
display-name: testCitationEntryCompareTo
]]></system-out>
</testcase>
<testcase name="testCitationEntryInitalPageInfoRemoved" classname="org.jabref.logic.openoffice.CitationEntryTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.openoffice.CitationEntryTest]/[test:testCitationEntryInitalPageInfoRemoved(org.jabref.logic.openoffice.CitationEntryTest)]
display-name: testCitationEntryInitalPageInfoRemoved
]]></system-out>
</testcase>
<testcase name="testFormat[0: format(&quot;&quot;)=&quot;&quot;]" classname="org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest]/[test:%5B0%3A format("")=""%5D]/[test:testFormat%5B0%3A format("")=""%5D(org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest)]
display-name: testFormat[0: format("")=""]
]]></system-out>
</testcase>
<testcase name="testFormat[1: format(&quot;Someone, Van Something&quot;)=&quot;Someone, Van Something&quot;]" classname="org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest]/[test:%5B1%3A format("Someone, Van Something")="Someone, Van Something"%5D]/[test:testFormat%5B1%3A format("Someone, Van Something")="Someone, Van Something"%5D(org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest)]
display-name: testFormat[1: format("Someone, Van Something")="Someone, Van Something"]
]]></system-out>
</testcase>
<testcase name="testFormat[2: format(&quot;John Smith and Black Brown, Peter&quot;)=&quot;John Smith; Black Brown, Peter&quot;]" classname="org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest]/[test:%5B2%3A format("John Smith and Black Brown, Peter")="John Smith; Black Brown, Peter"%5D]/[test:testFormat%5B2%3A format("John Smith and Black Brown, Peter")="John Smith; Black Brown, Peter"%5D(org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest)]
display-name: testFormat[2: format("John Smith and Black Brown, Peter")="John Smith; Black Brown, Peter"]
]]></system-out>
</testcase>
<testcase name="testFormat[3: format(&quot;von Neumann, John and Smith, John and Black Brown, Peter&quot;)=&quot;von Neumann, John; Smith, John; Black Brown, Peter&quot;]" classname="org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest]/[test:%5B3%3A format("von Neumann, John and Smith, John and Black Brown, Peter")="von Neumann, John; Smith, John; Black Brown, Peter"%5D]/[test:testFormat%5B3%3A format("von Neumann, John and Smith, John and Black Brown, Peter")="von Neumann, John; Smith, John; Black Brown, Peter"%5D(org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest)]
display-name: testFormat[3: format("von Neumann, John and Smith, John and Black Brown, Peter")="von Neumann, John; Smith, John; Black Brown, Peter"]
]]></system-out>
</testcase>
<testcase name="testFormat[4: format(&quot;John von Neumann and John Smith and Peter Black Brown&quot;)=&quot;John von Neumann; John Smith; Peter Black Brown&quot;]" classname="org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest]/[test:%5B4%3A format("John von Neumann and John Smith and Peter Black Brown")="John von Neumann; John Smith; Peter Black Brown"%5D]/[test:testFormat%5B4%3A format("John von Neumann and John Smith and Peter Black Brown")="John von Neumann; John Smith; Peter Black Brown"%5D(org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest)]
display-name: testFormat[4: format("John von Neumann and John Smith and Peter Black Brown")="John von Neumann; John Smith; Peter Black Brown"]
]]></system-out>
</testcase>
<testcase name="writeMutlipleEntriesInASingleFile" classname="org.jabref.logic.exporter.XmpExporterTest" time="0.031">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.XmpExporterTest]/[test:writeMutlipleEntriesInASingleFile(org.jabref.logic.exporter.XmpExporterTest)]
display-name: writeMutlipleEntriesInASingleFile
]]></system-out>
</testcase>
<testcase name="writeMultipleEntriesInDifferentFiles" classname="org.jabref.logic.exporter.XmpExporterTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.XmpExporterTest]/[test:writeMultipleEntriesInDifferentFiles(org.jabref.logic.exporter.XmpExporterTest)]
display-name: writeMultipleEntriesInDifferentFiles
]]></system-out>
</testcase>
<testcase name="exportSingleEntry" classname="org.jabref.logic.exporter.XmpExporterTest" time="0.365">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.XmpExporterTest]/[test:exportSingleEntry(org.jabref.logic.exporter.XmpExporterTest)]
display-name: exportSingleEntry
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[0: HTML file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B0%3A HTML file (*.html)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B0%3A HTML file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[0: HTML file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[0: HTML file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B0%3A HTML file (*.html)%5D]/[test:testExportingNullEntriesThrowsNPE%5B0%3A HTML file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[0: HTML file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[0: HTML file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B0%3A HTML file (*.html)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B0%3A HTML file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[0: HTML file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[1: Simple HTML file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B1%3A Simple HTML file (*.html)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B1%3A Simple HTML file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[1: Simple HTML file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[1: Simple HTML file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B1%3A Simple HTML file (*.html)%5D]/[test:testExportingNullEntriesThrowsNPE%5B1%3A Simple HTML file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[1: Simple HTML file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[1: Simple HTML file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B1%3A Simple HTML file (*.html)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B1%3A Simple HTML file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[1: Simple HTML file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[2: Docbook 4.4 file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B2%3A Docbook 4.4 file (*.xml)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B2%3A Docbook 4.4 file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[2: Docbook 4.4 file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[2: Docbook 4.4 file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B2%3A Docbook 4.4 file (*.xml)%5D]/[test:testExportingNullEntriesThrowsNPE%5B2%3A Docbook 4.4 file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[2: Docbook 4.4 file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[2: Docbook 4.4 file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B2%3A Docbook 4.4 file (*.xml)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B2%3A Docbook 4.4 file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[2: Docbook 4.4 file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[3: DIN 1505 file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B3%3A DIN 1505 file (*.rtf)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B3%3A DIN 1505 file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[3: DIN 1505 file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[3: DIN 1505 file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B3%3A DIN 1505 file (*.rtf)%5D]/[test:testExportingNullEntriesThrowsNPE%5B3%3A DIN 1505 file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[3: DIN 1505 file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[3: DIN 1505 file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B3%3A DIN 1505 file (*.rtf)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B3%3A DIN 1505 file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[3: DIN 1505 file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[4: Bib 0 file (*.rdf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B4%3A Bib 0 file (*.rdf)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B4%3A Bib 0 file (*.rdf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[4: Bib 0 file (*.rdf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[4: Bib 0 file (*.rdf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B4%3A Bib 0 file (*.rdf)%5D]/[test:testExportingNullEntriesThrowsNPE%5B4%3A Bib 0 file (*.rdf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[4: Bib 0 file (*.rdf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[4: Bib 0 file (*.rdf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B4%3A Bib 0 file (*.rdf)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B4%3A Bib 0 file (*.rdf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[4: Bib 0 file (*.rdf)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[5: HTML table file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B5%3A HTML table file (*.html)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B5%3A HTML table file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[5: HTML table file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[5: HTML table file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B5%3A HTML table file (*.html)%5D]/[test:testExportingNullEntriesThrowsNPE%5B5%3A HTML table file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[5: HTML table file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[5: HTML table file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B5%3A HTML table file (*.html)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B5%3A HTML table file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[5: HTML table file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[6: HTML list file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B6%3A HTML list file (*.html)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B6%3A HTML list file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[6: HTML list file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[6: HTML list file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B6%3A HTML list file (*.html)%5D]/[test:testExportingNullEntriesThrowsNPE%5B6%3A HTML list file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[6: HTML list file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[6: HTML list file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B6%3A HTML list file (*.html)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B6%3A HTML list file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[6: HTML list file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[7: HTML table (with Abstract &amp; BibTeX) file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B7%3A HTML table (with Abstract & BibTeX) file (*.html)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B7%3A HTML table (with Abstract & BibTeX) file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[7: HTML table (with Abstract & BibTeX) file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[7: HTML table (with Abstract &amp; BibTeX) file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B7%3A HTML table (with Abstract & BibTeX) file (*.html)%5D]/[test:testExportingNullEntriesThrowsNPE%5B7%3A HTML table (with Abstract & BibTeX) file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[7: HTML table (with Abstract & BibTeX) file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[7: HTML table (with Abstract &amp; BibTeX) file (*.html)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B7%3A HTML table (with Abstract & BibTeX) file (*.html)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B7%3A HTML table (with Abstract & BibTeX) file (*.html)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[7: HTML table (with Abstract & BibTeX) file (*.html)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[8: Harvard file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B8%3A Harvard file (*.rtf)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B8%3A Harvard file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[8: Harvard file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[8: Harvard file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B8%3A Harvard file (*.rtf)%5D]/[test:testExportingNullEntriesThrowsNPE%5B8%3A Harvard file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[8: Harvard file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[8: Harvard file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B8%3A Harvard file (*.rtf)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B8%3A Harvard file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[8: Harvard file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[9: ISO 690 file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B9%3A ISO 690 file (*.rtf)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B9%3A ISO 690 file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[9: ISO 690 file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[9: ISO 690 file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B9%3A ISO 690 file (*.rtf)%5D]/[test:testExportingNullEntriesThrowsNPE%5B9%3A ISO 690 file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[9: ISO 690 file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[9: ISO 690 file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B9%3A ISO 690 file (*.rtf)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B9%3A ISO 690 file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[9: ISO 690 file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[10: ISO 690 file (*.txt)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B10%3A ISO 690 file (*.txt)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B10%3A ISO 690 file (*.txt)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[10: ISO 690 file (*.txt)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[10: ISO 690 file (*.txt)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B10%3A ISO 690 file (*.txt)%5D]/[test:testExportingNullEntriesThrowsNPE%5B10%3A ISO 690 file (*.txt)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[10: ISO 690 file (*.txt)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[10: ISO 690 file (*.txt)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B10%3A ISO 690 file (*.txt)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B10%3A ISO 690 file (*.txt)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[10: ISO 690 file (*.txt)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[11: EndNote file (*.txt)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B11%3A EndNote file (*.txt)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B11%3A EndNote file (*.txt)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[11: EndNote file (*.txt)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[11: EndNote file (*.txt)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B11%3A EndNote file (*.txt)%5D]/[test:testExportingNullEntriesThrowsNPE%5B11%3A EndNote file (*.txt)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[11: EndNote file (*.txt)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[11: EndNote file (*.txt)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B11%3A EndNote file (*.txt)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B11%3A EndNote file (*.txt)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[11: EndNote file (*.txt)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[12: OpenOffice/LibreOffice file (*.csv)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B12%3A OpenOffice%2FLibreOffice file (*.csv)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B12%3A OpenOffice%2FLibreOffice file (*.csv)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[12: OpenOffice/LibreOffice file (*.csv)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[12: OpenOffice/LibreOffice file (*.csv)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B12%3A OpenOffice%2FLibreOffice file (*.csv)%5D]/[test:testExportingNullEntriesThrowsNPE%5B12%3A OpenOffice%2FLibreOffice file (*.csv)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[12: OpenOffice/LibreOffice file (*.csv)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[12: OpenOffice/LibreOffice file (*.csv)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B12%3A OpenOffice%2FLibreOffice file (*.csv)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B12%3A OpenOffice%2FLibreOffice file (*.csv)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[12: OpenOffice/LibreOffice file (*.csv)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[13: RIS file (*.ris)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B13%3A RIS file (*.ris)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B13%3A RIS file (*.ris)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[13: RIS file (*.ris)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[13: RIS file (*.ris)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B13%3A RIS file (*.ris)%5D]/[test:testExportingNullEntriesThrowsNPE%5B13%3A RIS file (*.ris)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[13: RIS file (*.ris)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[13: RIS file (*.ris)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B13%3A RIS file (*.ris)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B13%3A RIS file (*.ris)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[13: RIS file (*.ris)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[14: MIS Quarterly file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B14%3A MIS Quarterly file (*.rtf)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B14%3A MIS Quarterly file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[14: MIS Quarterly file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[14: MIS Quarterly file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B14%3A MIS Quarterly file (*.rtf)%5D]/[test:testExportingNullEntriesThrowsNPE%5B14%3A MIS Quarterly file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[14: MIS Quarterly file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[14: MIS Quarterly file (*.rtf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B14%3A MIS Quarterly file (*.rtf)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B14%3A MIS Quarterly file (*.rtf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[14: MIS Quarterly file (*.rtf)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[15: BibTeXML file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B15%3A BibTeXML file (*.xml)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B15%3A BibTeXML file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[15: BibTeXML file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[15: BibTeXML file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B15%3A BibTeXML file (*.xml)%5D]/[test:testExportingNullEntriesThrowsNPE%5B15%3A BibTeXML file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[15: BibTeXML file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[15: BibTeXML file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B15%3A BibTeXML file (*.xml)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B15%3A BibTeXML file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[15: BibTeXML file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[16: OpenOffice/LibreOffice Calc file (*.sxc)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B16%3A OpenOffice%2FLibreOffice Calc file (*.sxc)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B16%3A OpenOffice%2FLibreOffice Calc file (*.sxc)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[16: OpenOffice/LibreOffice Calc file (*.sxc)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[16: OpenOffice/LibreOffice Calc file (*.sxc)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B16%3A OpenOffice%2FLibreOffice Calc file (*.sxc)%5D]/[test:testExportingNullEntriesThrowsNPE%5B16%3A OpenOffice%2FLibreOffice Calc file (*.sxc)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[16: OpenOffice/LibreOffice Calc file (*.sxc)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[16: OpenOffice/LibreOffice Calc file (*.sxc)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B16%3A OpenOffice%2FLibreOffice Calc file (*.sxc)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B16%3A OpenOffice%2FLibreOffice Calc file (*.sxc)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[16: OpenOffice/LibreOffice Calc file (*.sxc)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[17: OpenDocument spreadsheet file (*.ods)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B17%3A OpenDocument spreadsheet file (*.ods)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B17%3A OpenDocument spreadsheet file (*.ods)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[17: OpenDocument spreadsheet file (*.ods)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[17: OpenDocument spreadsheet file (*.ods)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B17%3A OpenDocument spreadsheet file (*.ods)%5D]/[test:testExportingNullEntriesThrowsNPE%5B17%3A OpenDocument spreadsheet file (*.ods)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[17: OpenDocument spreadsheet file (*.ods)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[17: OpenDocument spreadsheet file (*.ods)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B17%3A OpenDocument spreadsheet file (*.ods)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B17%3A OpenDocument spreadsheet file (*.ods)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[17: OpenDocument spreadsheet file (*.ods)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[18: MS Office 2007 bib file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B18%3A MS Office 2007 bib file (*.xml)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B18%3A MS Office 2007 bib file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[18: MS Office 2007 bib file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[18: MS Office 2007 bib file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B18%3A MS Office 2007 bib file (*.xml)%5D]/[test:testExportingNullEntriesThrowsNPE%5B18%3A MS Office 2007 bib file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[18: MS Office 2007 bib file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[18: MS Office 2007 bib file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B18%3A MS Office 2007 bib file (*.xml)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B18%3A MS Office 2007 bib file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[18: MS Office 2007 bib file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[19: MODS file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B19%3A MODS file (*.xml)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B19%3A MODS file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[19: MODS file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[19: MODS file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B19%3A MODS file (*.xml)%5D]/[test:testExportingNullEntriesThrowsNPE%5B19%3A MODS file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[19: MODS file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[19: MODS file (*.xml)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B19%3A MODS file (*.xml)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B19%3A MODS file (*.xml)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[19: MODS file (*.xml)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[20: XMP file (*.xmp)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B20%3A XMP file (*.xmp)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B20%3A XMP file (*.xmp)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[20: XMP file (*.xmp)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[20: XMP file (*.xmp)]" classname="org.jabref.logic.exporter.ExporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B20%3A XMP file (*.xmp)%5D]/[test:testExportingNullEntriesThrowsNPE%5B20%3A XMP file (*.xmp)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[20: XMP file (*.xmp)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[20: XMP file (*.xmp)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B20%3A XMP file (*.xmp)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B20%3A XMP file (*.xmp)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[20: XMP file (*.xmp)]
]]></system-out>
</testcase>
<testcase name="testExportingEmptyDatabaseYieldsEmptyFile[21: XMP-annotated PDF (*.pdf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B21%3A XMP-annotated PDF (*.pdf)%5D]/[test:testExportingEmptyDatabaseYieldsEmptyFile%5B21%3A XMP-annotated PDF (*.pdf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingEmptyDatabaseYieldsEmptyFile[21: XMP-annotated PDF (*.pdf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullEntriesThrowsNPE[21: XMP-annotated PDF (*.pdf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B21%3A XMP-annotated PDF (*.pdf)%5D]/[test:testExportingNullEntriesThrowsNPE%5B21%3A XMP-annotated PDF (*.pdf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullEntriesThrowsNPE[21: XMP-annotated PDF (*.pdf)]
]]></system-out>
</testcase>
<testcase name="testExportingNullDatabaseThrowsNPE[21: XMP-annotated PDF (*.pdf)]" classname="org.jabref.logic.exporter.ExporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ExporterTest]/[test:%5B21%3A XMP-annotated PDF (*.pdf)%5D]/[test:testExportingNullDatabaseThrowsNPE%5B21%3A XMP-annotated PDF (*.pdf)%5D(org.jabref.logic.exporter.ExporterTest)]
display-name: testExportingNullDatabaseThrowsNPE[21: XMP-annotated PDF (*.pdf)]
]]></system-out>
</testcase>
<testcase name="testPerformExportForMultipleAuthors" classname="org.jabref.logic.exporter.CsvExportFormatTest" time="0.407">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.CsvExportFormatTest]/[test:testPerformExportForMultipleAuthors(org.jabref.logic.exporter.CsvExportFormatTest)]
display-name: testPerformExportForMultipleAuthors
]]></system-out>
</testcase>
<testcase name="testPerformExportForSingleAuthor" classname="org.jabref.logic.exporter.CsvExportFormatTest" time="0.157">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.CsvExportFormatTest]/[test:testPerformExportForSingleAuthor(org.jabref.logic.exporter.CsvExportFormatTest)]
display-name: testPerformExportForSingleAuthor
]]></system-out>
</testcase>
<testcase name="testPerformExportForSingleEditor" classname="org.jabref.logic.exporter.CsvExportFormatTest" time="0.094">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.CsvExportFormatTest]/[test:testPerformExportForSingleEditor(org.jabref.logic.exporter.CsvExportFormatTest)]
display-name: testPerformExportForSingleEditor
]]></system-out>
</testcase>
<testcase name="testPerformExportForMultipleEditors" classname="org.jabref.logic.exporter.CsvExportFormatTest" time="0.093">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.CsvExportFormatTest]/[test:testPerformExportForMultipleEditors(org.jabref.logic.exporter.CsvExportFormatTest)]
display-name: testPerformExportForMultipleEditors
]]></system-out>
</testcase>
<testcase name="emitWellFormedHtml" classname="org.jabref.logic.exporter.HtmlExportFormatTest" time="0.185">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.HtmlExportFormatTest]/[test:emitWellFormedHtml(org.jabref.logic.exporter.HtmlExportFormatTest)]
display-name: emitWellFormedHtml
]]></system-out>
</testcase>
<testcase name="testPerformExportWithNoEntry" classname="org.jabref.logic.exporter.MsBibExportFormatTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.MsBibExportFormatTest]/[test:testPerformExportWithNoEntry(org.jabref.logic.exporter.MsBibExportFormatTest)]
display-name: testPerformExportWithNoEntry
]]></system-out>
</testcase>
<testcase name="exportForNoEntriesWritesNothing" classname="org.jabref.logic.exporter.ModsExportFormatTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.exporter.ModsExportFormatTest]/[test:exportForNoEntriesWritesNothing(org.jabref.logic.exporter.ModsExportFormatTest)]
display-name: exportForNoEntriesWritesNothing
]]></system-out>
</testcase>
<testcase name="handlePermanentRedirections" classname="org.jabref.logic.net.MimeTypeDetectorTest" time="4.993">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.net.MimeTypeDetectorTest]/[test:handlePermanentRedirections(org.jabref.logic.net.MimeTypeDetectorTest)]
display-name: handlePermanentRedirections
]]></system-out>
</testcase>
<testcase name="beAbleToUseHeadRequest" classname="org.jabref.logic.net.MimeTypeDetectorTest" time="0.062">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.net.MimeTypeDetectorTest]/[test:beAbleToUseHeadRequest(org.jabref.logic.net.MimeTypeDetectorTest)]
display-name: beAbleToUseHeadRequest
]]></system-out>
</testcase>
<testcase name="beTrueForLocalPdfUri" classname="org.jabref.logic.net.MimeTypeDetectorTest" time="0.016">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.net.MimeTypeDetectorTest]/[test:beTrueForLocalPdfUri(org.jabref.logic.net.MimeTypeDetectorTest)]
display-name: beTrueForLocalPdfUri
]]></system-out>
</testcase>
<testcase name="beTrueForPdfMimeType" classname="org.jabref.logic.net.MimeTypeDetectorTest" time="0.367">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.net.MimeTypeDetectorTest]/[test:beTrueForPdfMimeType(org.jabref.logic.net.MimeTypeDetectorTest)]
display-name: beTrueForPdfMimeType
]]></system-out>
</testcase>
<testcase name="beFalseForUnreachableUrl" classname="org.jabref.logic.net.MimeTypeDetectorTest" time="0.03">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.net.MimeTypeDetectorTest]/[test:beFalseForUnreachableUrl(org.jabref.logic.net.MimeTypeDetectorTest)]
display-name: beFalseForUnreachableUrl
]]></system-out>
</testcase>
<testcase name="beTrueForPDFMimeTypeVariations" classname="org.jabref.logic.net.MimeTypeDetectorTest" time="0.078">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.net.MimeTypeDetectorTest]/[test:beTrueForPDFMimeTypeVariations(org.jabref.logic.net.MimeTypeDetectorTest)]
display-name: beTrueForPDFMimeTypeVariations
]]></system-out>
</testcase>
<testcase name="beAbleToUseGetRequest" classname="org.jabref.logic.net.MimeTypeDetectorTest" time="0.216">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.net.MimeTypeDetectorTest]/[test:beAbleToUseGetRequest(org.jabref.logic.net.MimeTypeDetectorTest)]
display-name: beAbleToUseGetRequest
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormat[0: ris]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.082">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B0%3A ris%5D]/[test:testImportUnknownFormat%5B0%3A ris%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormat[0: ris]
]]></system-out>
</testcase>
<testcase name="testImportFormatFromFile[0: ris]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B0%3A ris%5D]/[test:testImportFormatFromFile%5B0%3A ris%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportFormatFromFile[0: ris]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormatFromString[0: ris]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.007">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B0%3A ris%5D]/[test:testImportUnknownFormatFromString%5B0%3A ris%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormatFromString[0: ris]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormat[1: isi]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.008">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B1%3A isi%5D]/[test:testImportUnknownFormat%5B1%3A isi%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormat[1: isi]
]]></system-out>
</testcase>
<testcase name="testImportFormatFromFile[1: isi]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B1%3A isi%5D]/[test:testImportFormatFromFile%5B1%3A isi%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportFormatFromFile[1: isi]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormatFromString[1: isi]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B1%3A isi%5D]/[test:testImportUnknownFormatFromString%5B1%3A isi%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormatFromString[1: isi]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormat[2: silverplatter]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B2%3A silverplatter%5D]/[test:testImportUnknownFormat%5B2%3A silverplatter%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormat[2: silverplatter]
]]></system-out>
</testcase>
<testcase name="testImportFormatFromFile[2: silverplatter]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B2%3A silverplatter%5D]/[test:testImportFormatFromFile%5B2%3A silverplatter%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportFormatFromFile[2: silverplatter]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormatFromString[2: silverplatter]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B2%3A silverplatter%5D]/[test:testImportUnknownFormatFromString%5B2%3A silverplatter%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormatFromString[2: silverplatter]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormat[3: repecnep]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B3%3A repecnep%5D]/[test:testImportUnknownFormat%5B3%3A repecnep%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormat[3: repecnep]
]]></system-out>
</testcase>
<testcase name="testImportFormatFromFile[3: repecnep]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B3%3A repecnep%5D]/[test:testImportFormatFromFile%5B3%3A repecnep%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportFormatFromFile[3: repecnep]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormatFromString[3: repecnep]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B3%3A repecnep%5D]/[test:testImportUnknownFormatFromString%5B3%3A repecnep%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormatFromString[3: repecnep]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormat[4: ovid]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B4%3A ovid%5D]/[test:testImportUnknownFormat%5B4%3A ovid%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormat[4: ovid]
]]></system-out>
</testcase>
<testcase name="testImportFormatFromFile[4: ovid]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B4%3A ovid%5D]/[test:testImportFormatFromFile%5B4%3A ovid%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportFormatFromFile[4: ovid]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormatFromString[4: ovid]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.006">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B4%3A ovid%5D]/[test:testImportUnknownFormatFromString%5B4%3A ovid%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormatFromString[4: ovid]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormat[5: refer]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.01">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B5%3A refer%5D]/[test:testImportUnknownFormat%5B5%3A refer%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormat[5: refer]
]]></system-out>
</testcase>
<testcase name="testImportFormatFromFile[5: refer]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B5%3A refer%5D]/[test:testImportFormatFromFile%5B5%3A refer%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportFormatFromFile[5: refer]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormatFromString[5: refer]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B5%3A refer%5D]/[test:testImportUnknownFormatFromString%5B5%3A refer%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormatFromString[5: refer]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormat[6: msbib]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.048">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B6%3A msbib%5D]/[test:testImportUnknownFormat%5B6%3A msbib%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormat[6: msbib]
]]></system-out>
</testcase>
<testcase name="testImportFormatFromFile[6: msbib]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B6%3A msbib%5D]/[test:testImportFormatFromFile%5B6%3A msbib%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportFormatFromFile[6: msbib]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormatFromString[6: msbib]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.006">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B6%3A msbib%5D]/[test:testImportUnknownFormatFromString%5B6%3A msbib%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormatFromString[6: msbib]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormat[7: bibtex]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B7%3A bibtex%5D]/[test:testImportUnknownFormat%5B7%3A bibtex%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormat[7: bibtex]
]]></system-out>
</testcase>
<testcase name="testImportFormatFromFile[7: bibtex]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B7%3A bibtex%5D]/[test:testImportFormatFromFile%5B7%3A bibtex%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportFormatFromFile[7: bibtex]
]]></system-out>
</testcase>
<testcase name="testImportUnknownFormatFromString[7: bibtex]" classname="org.jabref.logic.importer.ImportFormatReaderIntegrationTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImportFormatReaderIntegrationTest]/[test:%5B7%3A bibtex%5D]/[test:testImportUnknownFormatFromString%5B7%3A bibtex%5D(org.jabref.logic.importer.ImportFormatReaderIntegrationTest)]
display-name: testImportUnknownFormatFromString[7: bibtex]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[0: Biblioscape]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B0%3A Biblioscape%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B0%3A Biblioscape%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[0: Biblioscape]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[0: Biblioscape]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B0%3A Biblioscape%5D]/[test:getFormatterNameDoesNotReturnNull%5B0%3A Biblioscape%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[0: Biblioscape]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[0: Biblioscape]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B0%3A Biblioscape%5D]/[test:getFileTypeDoesNotReturnNull%5B0%3A Biblioscape%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[0: Biblioscape]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[0: Biblioscape]" classname="org.jabref.logic.importer.ImporterTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B0%3A Biblioscape%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B0%3A Biblioscape%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[0: Biblioscape]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[0: Biblioscape]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B0%3A Biblioscape%5D]/[test:getIdDoesNotReturnNull%5B0%3A Biblioscape%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[0: Biblioscape]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[0: Biblioscape]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B0%3A Biblioscape%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B0%3A Biblioscape%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[0: Biblioscape]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[0: Biblioscape]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B0%3A Biblioscape%5D]/[test:getDescriptionDoesNotReturnNull%5B0%3A Biblioscape%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[0: Biblioscape]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[0: Biblioscape]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B0%3A Biblioscape%5D]/[test:importDatabaseWithNullForStringThrowsException%5B0%3A Biblioscape%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[0: Biblioscape]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[0: Biblioscape]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B0%3A Biblioscape%5D]/[test:getIdDoesNotContainWhitespace%5B0%3A Biblioscape%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[0: Biblioscape]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[0: Biblioscape]" classname="org.jabref.logic.importer.ImporterTest" time="0.094">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B0%3A Biblioscape%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B0%3A Biblioscape%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[0: Biblioscape]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[1: BibTeX]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B1%3A BibTeX%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B1%3A BibTeX%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[1: BibTeX]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[1: BibTeX]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B1%3A BibTeX%5D]/[test:getFormatterNameDoesNotReturnNull%5B1%3A BibTeX%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[1: BibTeX]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[1: BibTeX]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B1%3A BibTeX%5D]/[test:getFileTypeDoesNotReturnNull%5B1%3A BibTeX%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[1: BibTeX]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[1: BibTeX]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B1%3A BibTeX%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B1%3A BibTeX%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[1: BibTeX]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[1: BibTeX]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B1%3A BibTeX%5D]/[test:getIdDoesNotReturnNull%5B1%3A BibTeX%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[1: BibTeX]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[1: BibTeX]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B1%3A BibTeX%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B1%3A BibTeX%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[1: BibTeX]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[1: BibTeX]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B1%3A BibTeX%5D]/[test:getDescriptionDoesNotReturnNull%5B1%3A BibTeX%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[1: BibTeX]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[1: BibTeX]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B1%3A BibTeX%5D]/[test:importDatabaseWithNullForStringThrowsException%5B1%3A BibTeX%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[1: BibTeX]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[1: BibTeX]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B1%3A BibTeX%5D]/[test:getIdDoesNotContainWhitespace%5B1%3A BibTeX%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[1: BibTeX]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[1: BibTeX]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B1%3A BibTeX%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B1%3A BibTeX%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[1: BibTeX]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[2: BibTeXML]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B2%3A BibTeXML%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B2%3A BibTeXML%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[2: BibTeXML]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[2: BibTeXML]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B2%3A BibTeXML%5D]/[test:getFormatterNameDoesNotReturnNull%5B2%3A BibTeXML%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[2: BibTeXML]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[2: BibTeXML]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B2%3A BibTeXML%5D]/[test:getFileTypeDoesNotReturnNull%5B2%3A BibTeXML%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[2: BibTeXML]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[2: BibTeXML]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B2%3A BibTeXML%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B2%3A BibTeXML%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[2: BibTeXML]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[2: BibTeXML]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B2%3A BibTeXML%5D]/[test:getIdDoesNotReturnNull%5B2%3A BibTeXML%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[2: BibTeXML]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[2: BibTeXML]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B2%3A BibTeXML%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B2%3A BibTeXML%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[2: BibTeXML]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[2: BibTeXML]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B2%3A BibTeXML%5D]/[test:getDescriptionDoesNotReturnNull%5B2%3A BibTeXML%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[2: BibTeXML]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[2: BibTeXML]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B2%3A BibTeXML%5D]/[test:importDatabaseWithNullForStringThrowsException%5B2%3A BibTeXML%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[2: BibTeXML]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[2: BibTeXML]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B2%3A BibTeXML%5D]/[test:getIdDoesNotContainWhitespace%5B2%3A BibTeXML%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[2: BibTeXML]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[2: BibTeXML]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B2%3A BibTeXML%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B2%3A BibTeXML%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[2: BibTeXML]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[3: Copac]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B3%3A Copac%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B3%3A Copac%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[3: Copac]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[3: Copac]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B3%3A Copac%5D]/[test:getFormatterNameDoesNotReturnNull%5B3%3A Copac%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[3: Copac]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[3: Copac]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B3%3A Copac%5D]/[test:getFileTypeDoesNotReturnNull%5B3%3A Copac%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[3: Copac]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[3: Copac]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B3%3A Copac%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B3%3A Copac%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[3: Copac]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[3: Copac]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B3%3A Copac%5D]/[test:getIdDoesNotReturnNull%5B3%3A Copac%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[3: Copac]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[3: Copac]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B3%3A Copac%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B3%3A Copac%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[3: Copac]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[3: Copac]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B3%3A Copac%5D]/[test:getDescriptionDoesNotReturnNull%5B3%3A Copac%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[3: Copac]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[3: Copac]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B3%3A Copac%5D]/[test:importDatabaseWithNullForStringThrowsException%5B3%3A Copac%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[3: Copac]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[3: Copac]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B3%3A Copac%5D]/[test:getIdDoesNotContainWhitespace%5B3%3A Copac%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[3: Copac]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[3: Copac]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B3%3A Copac%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B3%3A Copac%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[3: Copac]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[4: Refer/Endnote]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B4%3A Refer%2FEndnote%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B4%3A Refer%2FEndnote%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[4: Refer/Endnote]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[4: Refer/Endnote]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B4%3A Refer%2FEndnote%5D]/[test:getFormatterNameDoesNotReturnNull%5B4%3A Refer%2FEndnote%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[4: Refer/Endnote]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[4: Refer/Endnote]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B4%3A Refer%2FEndnote%5D]/[test:getFileTypeDoesNotReturnNull%5B4%3A Refer%2FEndnote%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[4: Refer/Endnote]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[4: Refer/Endnote]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B4%3A Refer%2FEndnote%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B4%3A Refer%2FEndnote%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[4: Refer/Endnote]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[4: Refer/Endnote]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B4%3A Refer%2FEndnote%5D]/[test:getIdDoesNotReturnNull%5B4%3A Refer%2FEndnote%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[4: Refer/Endnote]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[4: Refer/Endnote]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B4%3A Refer%2FEndnote%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B4%3A Refer%2FEndnote%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[4: Refer/Endnote]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[4: Refer/Endnote]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B4%3A Refer%2FEndnote%5D]/[test:getDescriptionDoesNotReturnNull%5B4%3A Refer%2FEndnote%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[4: Refer/Endnote]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[4: Refer/Endnote]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B4%3A Refer%2FEndnote%5D]/[test:importDatabaseWithNullForStringThrowsException%5B4%3A Refer%2FEndnote%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[4: Refer/Endnote]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[4: Refer/Endnote]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B4%3A Refer%2FEndnote%5D]/[test:getIdDoesNotContainWhitespace%5B4%3A Refer%2FEndnote%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[4: Refer/Endnote]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[4: Refer/Endnote]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B4%3A Refer%2FEndnote%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B4%3A Refer%2FEndnote%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[4: Refer/Endnote]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[5: text citations]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B5%3A text citations%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B5%3A text citations%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[5: text citations]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[5: text citations]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B5%3A text citations%5D]/[test:getFormatterNameDoesNotReturnNull%5B5%3A text citations%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[5: text citations]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[5: text citations]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B5%3A text citations%5D]/[test:getFileTypeDoesNotReturnNull%5B5%3A text citations%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[5: text citations]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[5: text citations]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B5%3A text citations%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B5%3A text citations%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[5: text citations]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[5: text citations]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B5%3A text citations%5D]/[test:getIdDoesNotReturnNull%5B5%3A text citations%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[5: text citations]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[5: text citations]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B5%3A text citations%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B5%3A text citations%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[5: text citations]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[5: text citations]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B5%3A text citations%5D]/[test:getDescriptionDoesNotReturnNull%5B5%3A text citations%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[5: text citations]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[5: text citations]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B5%3A text citations%5D]/[test:importDatabaseWithNullForStringThrowsException%5B5%3A text citations%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[5: text citations]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[5: text citations]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B5%3A text citations%5D]/[test:getIdDoesNotContainWhitespace%5B5%3A text citations%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[5: text citations]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[5: text citations]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B5%3A text citations%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B5%3A text citations%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[5: text citations]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[6: INSPEC]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B6%3A INSPEC%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B6%3A INSPEC%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[6: INSPEC]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[6: INSPEC]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B6%3A INSPEC%5D]/[test:getFormatterNameDoesNotReturnNull%5B6%3A INSPEC%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[6: INSPEC]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[6: INSPEC]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B6%3A INSPEC%5D]/[test:getFileTypeDoesNotReturnNull%5B6%3A INSPEC%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[6: INSPEC]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[6: INSPEC]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B6%3A INSPEC%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B6%3A INSPEC%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[6: INSPEC]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[6: INSPEC]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B6%3A INSPEC%5D]/[test:getIdDoesNotReturnNull%5B6%3A INSPEC%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[6: INSPEC]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[6: INSPEC]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B6%3A INSPEC%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B6%3A INSPEC%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[6: INSPEC]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[6: INSPEC]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B6%3A INSPEC%5D]/[test:getDescriptionDoesNotReturnNull%5B6%3A INSPEC%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[6: INSPEC]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[6: INSPEC]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B6%3A INSPEC%5D]/[test:importDatabaseWithNullForStringThrowsException%5B6%3A INSPEC%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[6: INSPEC]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[6: INSPEC]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B6%3A INSPEC%5D]/[test:getIdDoesNotContainWhitespace%5B6%3A INSPEC%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[6: INSPEC]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[6: INSPEC]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B6%3A INSPEC%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B6%3A INSPEC%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[6: INSPEC]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[7: ISI]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B7%3A ISI%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B7%3A ISI%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[7: ISI]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[7: ISI]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B7%3A ISI%5D]/[test:getFormatterNameDoesNotReturnNull%5B7%3A ISI%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[7: ISI]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[7: ISI]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B7%3A ISI%5D]/[test:getFileTypeDoesNotReturnNull%5B7%3A ISI%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[7: ISI]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[7: ISI]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B7%3A ISI%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B7%3A ISI%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[7: ISI]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[7: ISI]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B7%3A ISI%5D]/[test:getIdDoesNotReturnNull%5B7%3A ISI%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[7: ISI]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[7: ISI]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B7%3A ISI%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B7%3A ISI%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[7: ISI]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[7: ISI]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B7%3A ISI%5D]/[test:getDescriptionDoesNotReturnNull%5B7%3A ISI%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[7: ISI]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[7: ISI]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B7%3A ISI%5D]/[test:importDatabaseWithNullForStringThrowsException%5B7%3A ISI%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[7: ISI]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[7: ISI]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B7%3A ISI%5D]/[test:getIdDoesNotContainWhitespace%5B7%3A ISI%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[7: ISI]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[7: ISI]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B7%3A ISI%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B7%3A ISI%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[7: ISI]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[8: Medline/PubMed]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B8%3A Medline%2FPubMed%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B8%3A Medline%2FPubMed%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[8: Medline/PubMed]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[8: Medline/PubMed]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B8%3A Medline%2FPubMed%5D]/[test:getFormatterNameDoesNotReturnNull%5B8%3A Medline%2FPubMed%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[8: Medline/PubMed]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[8: Medline/PubMed]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B8%3A Medline%2FPubMed%5D]/[test:getFileTypeDoesNotReturnNull%5B8%3A Medline%2FPubMed%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[8: Medline/PubMed]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[8: Medline/PubMed]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B8%3A Medline%2FPubMed%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B8%3A Medline%2FPubMed%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[8: Medline/PubMed]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[8: Medline/PubMed]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B8%3A Medline%2FPubMed%5D]/[test:getIdDoesNotReturnNull%5B8%3A Medline%2FPubMed%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[8: Medline/PubMed]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[8: Medline/PubMed]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B8%3A Medline%2FPubMed%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B8%3A Medline%2FPubMed%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[8: Medline/PubMed]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[8: Medline/PubMed]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B8%3A Medline%2FPubMed%5D]/[test:getDescriptionDoesNotReturnNull%5B8%3A Medline%2FPubMed%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[8: Medline/PubMed]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[8: Medline/PubMed]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B8%3A Medline%2FPubMed%5D]/[test:importDatabaseWithNullForStringThrowsException%5B8%3A Medline%2FPubMed%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[8: Medline/PubMed]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[8: Medline/PubMed]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B8%3A Medline%2FPubMed%5D]/[test:getIdDoesNotContainWhitespace%5B8%3A Medline%2FPubMed%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[8: Medline/PubMed]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[8: Medline/PubMed]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B8%3A Medline%2FPubMed%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B8%3A Medline%2FPubMed%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[8: Medline/PubMed]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[9: Medline/PubMed Plain]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B9%3A Medline%2FPubMed Plain%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B9%3A Medline%2FPubMed Plain%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[9: Medline/PubMed Plain]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[9: Medline/PubMed Plain]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B9%3A Medline%2FPubMed Plain%5D]/[test:getFormatterNameDoesNotReturnNull%5B9%3A Medline%2FPubMed Plain%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[9: Medline/PubMed Plain]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[9: Medline/PubMed Plain]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B9%3A Medline%2FPubMed Plain%5D]/[test:getFileTypeDoesNotReturnNull%5B9%3A Medline%2FPubMed Plain%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[9: Medline/PubMed Plain]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[9: Medline/PubMed Plain]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B9%3A Medline%2FPubMed Plain%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B9%3A Medline%2FPubMed Plain%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[9: Medline/PubMed Plain]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[9: Medline/PubMed Plain]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B9%3A Medline%2FPubMed Plain%5D]/[test:getIdDoesNotReturnNull%5B9%3A Medline%2FPubMed Plain%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[9: Medline/PubMed Plain]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[9: Medline/PubMed Plain]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B9%3A Medline%2FPubMed Plain%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B9%3A Medline%2FPubMed Plain%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[9: Medline/PubMed Plain]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[9: Medline/PubMed Plain]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B9%3A Medline%2FPubMed Plain%5D]/[test:getDescriptionDoesNotReturnNull%5B9%3A Medline%2FPubMed Plain%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[9: Medline/PubMed Plain]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[9: Medline/PubMed Plain]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B9%3A Medline%2FPubMed Plain%5D]/[test:importDatabaseWithNullForStringThrowsException%5B9%3A Medline%2FPubMed Plain%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[9: Medline/PubMed Plain]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[9: Medline/PubMed Plain]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B9%3A Medline%2FPubMed Plain%5D]/[test:getIdDoesNotContainWhitespace%5B9%3A Medline%2FPubMed Plain%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[9: Medline/PubMed Plain]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[9: Medline/PubMed Plain]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B9%3A Medline%2FPubMed Plain%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B9%3A Medline%2FPubMed Plain%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[9: Medline/PubMed Plain]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[10: MODS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B10%3A MODS%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B10%3A MODS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[10: MODS]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[10: MODS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B10%3A MODS%5D]/[test:getFormatterNameDoesNotReturnNull%5B10%3A MODS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[10: MODS]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[10: MODS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B10%3A MODS%5D]/[test:getFileTypeDoesNotReturnNull%5B10%3A MODS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[10: MODS]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[10: MODS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B10%3A MODS%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B10%3A MODS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[10: MODS]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[10: MODS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B10%3A MODS%5D]/[test:getIdDoesNotReturnNull%5B10%3A MODS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[10: MODS]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[10: MODS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B10%3A MODS%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B10%3A MODS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[10: MODS]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[10: MODS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B10%3A MODS%5D]/[test:getDescriptionDoesNotReturnNull%5B10%3A MODS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[10: MODS]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[10: MODS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B10%3A MODS%5D]/[test:importDatabaseWithNullForStringThrowsException%5B10%3A MODS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[10: MODS]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[10: MODS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B10%3A MODS%5D]/[test:getIdDoesNotContainWhitespace%5B10%3A MODS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[10: MODS]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[10: MODS]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B10%3A MODS%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B10%3A MODS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[10: MODS]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[11: MSBib]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B11%3A MSBib%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B11%3A MSBib%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[11: MSBib]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[11: MSBib]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B11%3A MSBib%5D]/[test:getFormatterNameDoesNotReturnNull%5B11%3A MSBib%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[11: MSBib]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[11: MSBib]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B11%3A MSBib%5D]/[test:getFileTypeDoesNotReturnNull%5B11%3A MSBib%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[11: MSBib]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[11: MSBib]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B11%3A MSBib%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B11%3A MSBib%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[11: MSBib]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[11: MSBib]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B11%3A MSBib%5D]/[test:getIdDoesNotReturnNull%5B11%3A MSBib%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[11: MSBib]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[11: MSBib]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B11%3A MSBib%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B11%3A MSBib%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[11: MSBib]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[11: MSBib]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B11%3A MSBib%5D]/[test:getDescriptionDoesNotReturnNull%5B11%3A MSBib%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[11: MSBib]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[11: MSBib]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B11%3A MSBib%5D]/[test:importDatabaseWithNullForStringThrowsException%5B11%3A MSBib%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[11: MSBib]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[11: MSBib]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B11%3A MSBib%5D]/[test:getIdDoesNotContainWhitespace%5B11%3A MSBib%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[11: MSBib]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[11: MSBib]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B11%3A MSBib%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B11%3A MSBib%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[11: MSBib]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[12: Ovid]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B12%3A Ovid%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B12%3A Ovid%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[12: Ovid]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[12: Ovid]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B12%3A Ovid%5D]/[test:getFormatterNameDoesNotReturnNull%5B12%3A Ovid%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[12: Ovid]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[12: Ovid]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B12%3A Ovid%5D]/[test:getFileTypeDoesNotReturnNull%5B12%3A Ovid%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[12: Ovid]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[12: Ovid]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B12%3A Ovid%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B12%3A Ovid%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[12: Ovid]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[12: Ovid]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B12%3A Ovid%5D]/[test:getIdDoesNotReturnNull%5B12%3A Ovid%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[12: Ovid]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[12: Ovid]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B12%3A Ovid%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B12%3A Ovid%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[12: Ovid]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[12: Ovid]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B12%3A Ovid%5D]/[test:getDescriptionDoesNotReturnNull%5B12%3A Ovid%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[12: Ovid]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[12: Ovid]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B12%3A Ovid%5D]/[test:importDatabaseWithNullForStringThrowsException%5B12%3A Ovid%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[12: Ovid]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[12: Ovid]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B12%3A Ovid%5D]/[test:getIdDoesNotContainWhitespace%5B12%3A Ovid%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[12: Ovid]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[12: Ovid]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B12%3A Ovid%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B12%3A Ovid%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[12: Ovid]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[13: PDFcontent]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B13%3A PDFcontent%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B13%3A PDFcontent%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[13: PDFcontent]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[13: PDFcontent]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B13%3A PDFcontent%5D]/[test:getFormatterNameDoesNotReturnNull%5B13%3A PDFcontent%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[13: PDFcontent]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[13: PDFcontent]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B13%3A PDFcontent%5D]/[test:getFileTypeDoesNotReturnNull%5B13%3A PDFcontent%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[13: PDFcontent]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[13: PDFcontent]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B13%3A PDFcontent%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B13%3A PDFcontent%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[13: PDFcontent]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[13: PDFcontent]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B13%3A PDFcontent%5D]/[test:getIdDoesNotReturnNull%5B13%3A PDFcontent%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[13: PDFcontent]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[13: PDFcontent]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B13%3A PDFcontent%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B13%3A PDFcontent%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[13: PDFcontent]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[13: PDFcontent]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B13%3A PDFcontent%5D]/[test:getDescriptionDoesNotReturnNull%5B13%3A PDFcontent%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[13: PDFcontent]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[13: PDFcontent]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B13%3A PDFcontent%5D]/[test:importDatabaseWithNullForStringThrowsException%5B13%3A PDFcontent%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[13: PDFcontent]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[13: PDFcontent]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B13%3A PDFcontent%5D]/[test:getIdDoesNotContainWhitespace%5B13%3A PDFcontent%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[13: PDFcontent]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[13: PDFcontent]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B13%3A PDFcontent%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B13%3A PDFcontent%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[13: PDFcontent]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[14: XMP-annotated PDF]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B14%3A XMP-annotated PDF%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B14%3A XMP-annotated PDF%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[14: XMP-annotated PDF]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[14: XMP-annotated PDF]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B14%3A XMP-annotated PDF%5D]/[test:getFormatterNameDoesNotReturnNull%5B14%3A XMP-annotated PDF%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[14: XMP-annotated PDF]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[14: XMP-annotated PDF]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B14%3A XMP-annotated PDF%5D]/[test:getFileTypeDoesNotReturnNull%5B14%3A XMP-annotated PDF%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[14: XMP-annotated PDF]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[14: XMP-annotated PDF]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B14%3A XMP-annotated PDF%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B14%3A XMP-annotated PDF%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[14: XMP-annotated PDF]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[14: XMP-annotated PDF]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B14%3A XMP-annotated PDF%5D]/[test:getIdDoesNotReturnNull%5B14%3A XMP-annotated PDF%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[14: XMP-annotated PDF]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[14: XMP-annotated PDF]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B14%3A XMP-annotated PDF%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B14%3A XMP-annotated PDF%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[14: XMP-annotated PDF]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[14: XMP-annotated PDF]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B14%3A XMP-annotated PDF%5D]/[test:getDescriptionDoesNotReturnNull%5B14%3A XMP-annotated PDF%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[14: XMP-annotated PDF]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[14: XMP-annotated PDF]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B14%3A XMP-annotated PDF%5D]/[test:importDatabaseWithNullForStringThrowsException%5B14%3A XMP-annotated PDF%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[14: XMP-annotated PDF]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[14: XMP-annotated PDF]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B14%3A XMP-annotated PDF%5D]/[test:getIdDoesNotContainWhitespace%5B14%3A XMP-annotated PDF%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[14: XMP-annotated PDF]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[14: XMP-annotated PDF]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B14%3A XMP-annotated PDF%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B14%3A XMP-annotated PDF%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[14: XMP-annotated PDF]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[15: REPEC New Economic Papers (NEP)]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B15%3A REPEC New Economic Papers (NEP)%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B15%3A REPEC New Economic Papers (NEP)%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[15: REPEC New Economic Papers (NEP)]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[15: REPEC New Economic Papers (NEP)]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B15%3A REPEC New Economic Papers (NEP)%5D]/[test:getFormatterNameDoesNotReturnNull%5B15%3A REPEC New Economic Papers (NEP)%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[15: REPEC New Economic Papers (NEP)]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[15: REPEC New Economic Papers (NEP)]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B15%3A REPEC New Economic Papers (NEP)%5D]/[test:getFileTypeDoesNotReturnNull%5B15%3A REPEC New Economic Papers (NEP)%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[15: REPEC New Economic Papers (NEP)]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[15: REPEC New Economic Papers (NEP)]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B15%3A REPEC New Economic Papers (NEP)%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B15%3A REPEC New Economic Papers (NEP)%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[15: REPEC New Economic Papers (NEP)]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[15: REPEC New Economic Papers (NEP)]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B15%3A REPEC New Economic Papers (NEP)%5D]/[test:getIdDoesNotReturnNull%5B15%3A REPEC New Economic Papers (NEP)%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[15: REPEC New Economic Papers (NEP)]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[15: REPEC New Economic Papers (NEP)]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B15%3A REPEC New Economic Papers (NEP)%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B15%3A REPEC New Economic Papers (NEP)%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[15: REPEC New Economic Papers (NEP)]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[15: REPEC New Economic Papers (NEP)]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B15%3A REPEC New Economic Papers (NEP)%5D]/[test:getDescriptionDoesNotReturnNull%5B15%3A REPEC New Economic Papers (NEP)%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[15: REPEC New Economic Papers (NEP)]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[15: REPEC New Economic Papers (NEP)]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B15%3A REPEC New Economic Papers (NEP)%5D]/[test:importDatabaseWithNullForStringThrowsException%5B15%3A REPEC New Economic Papers (NEP)%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[15: REPEC New Economic Papers (NEP)]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[15: REPEC New Economic Papers (NEP)]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B15%3A REPEC New Economic Papers (NEP)%5D]/[test:getIdDoesNotContainWhitespace%5B15%3A REPEC New Economic Papers (NEP)%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[15: REPEC New Economic Papers (NEP)]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[15: REPEC New Economic Papers (NEP)]" classname="org.jabref.logic.importer.ImporterTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B15%3A REPEC New Economic Papers (NEP)%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B15%3A REPEC New Economic Papers (NEP)%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[15: REPEC New Economic Papers (NEP)]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[16: RIS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B16%3A RIS%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B16%3A RIS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[16: RIS]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[16: RIS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B16%3A RIS%5D]/[test:getFormatterNameDoesNotReturnNull%5B16%3A RIS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[16: RIS]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[16: RIS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B16%3A RIS%5D]/[test:getFileTypeDoesNotReturnNull%5B16%3A RIS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[16: RIS]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[16: RIS]" classname="org.jabref.logic.importer.ImporterTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B16%3A RIS%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B16%3A RIS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[16: RIS]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[16: RIS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B16%3A RIS%5D]/[test:getIdDoesNotReturnNull%5B16%3A RIS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[16: RIS]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[16: RIS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B16%3A RIS%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B16%3A RIS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[16: RIS]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[16: RIS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B16%3A RIS%5D]/[test:getDescriptionDoesNotReturnNull%5B16%3A RIS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[16: RIS]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[16: RIS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B16%3A RIS%5D]/[test:importDatabaseWithNullForStringThrowsException%5B16%3A RIS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[16: RIS]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[16: RIS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B16%3A RIS%5D]/[test:getIdDoesNotContainWhitespace%5B16%3A RIS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[16: RIS]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[16: RIS]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B16%3A RIS%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B16%3A RIS%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[16: RIS]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForStringThrowsException[17: SilverPlatter]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B17%3A SilverPlatter%5D]/[test:isRecognizedFormatWithNullForStringThrowsException%5B17%3A SilverPlatter%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForStringThrowsException[17: SilverPlatter]
]]></system-out>
</testcase>
<testcase name="getFormatterNameDoesNotReturnNull[17: SilverPlatter]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B17%3A SilverPlatter%5D]/[test:getFormatterNameDoesNotReturnNull%5B17%3A SilverPlatter%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFormatterNameDoesNotReturnNull[17: SilverPlatter]
]]></system-out>
</testcase>
<testcase name="getFileTypeDoesNotReturnNull[17: SilverPlatter]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B17%3A SilverPlatter%5D]/[test:getFileTypeDoesNotReturnNull%5B17%3A SilverPlatter%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getFileTypeDoesNotReturnNull[17: SilverPlatter]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForBufferedReaderThrowsException[17: SilverPlatter]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B17%3A SilverPlatter%5D]/[test:importDatabaseWithNullForBufferedReaderThrowsException%5B17%3A SilverPlatter%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForBufferedReaderThrowsException[17: SilverPlatter]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotReturnNull[17: SilverPlatter]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B17%3A SilverPlatter%5D]/[test:getIdDoesNotReturnNull%5B17%3A SilverPlatter%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotReturnNull[17: SilverPlatter]
]]></system-out>
</testcase>
<testcase name="isRecognizedFormatWithNullForBufferedReaderThrowsException[17: SilverPlatter]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B17%3A SilverPlatter%5D]/[test:isRecognizedFormatWithNullForBufferedReaderThrowsException%5B17%3A SilverPlatter%5D(org.jabref.logic.importer.ImporterTest)]
display-name: isRecognizedFormatWithNullForBufferedReaderThrowsException[17: SilverPlatter]
]]></system-out>
</testcase>
<testcase name="getDescriptionDoesNotReturnNull[17: SilverPlatter]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B17%3A SilverPlatter%5D]/[test:getDescriptionDoesNotReturnNull%5B17%3A SilverPlatter%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getDescriptionDoesNotReturnNull[17: SilverPlatter]
]]></system-out>
</testcase>
<testcase name="importDatabaseWithNullForStringThrowsException[17: SilverPlatter]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B17%3A SilverPlatter%5D]/[test:importDatabaseWithNullForStringThrowsException%5B17%3A SilverPlatter%5D(org.jabref.logic.importer.ImporterTest)]
display-name: importDatabaseWithNullForStringThrowsException[17: SilverPlatter]
]]></system-out>
</testcase>
<testcase name="getIdDoesNotContainWhitespace[17: SilverPlatter]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B17%3A SilverPlatter%5D]/[test:getIdDoesNotContainWhitespace%5B17%3A SilverPlatter%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdDoesNotContainWhitespace[17: SilverPlatter]
]]></system-out>
</testcase>
<testcase name="getIdStripsSpecialCharactersAndConvertsToLowercase[17: SilverPlatter]" classname="org.jabref.logic.importer.ImporterTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.importer.ImporterTest]/[test:%5B17%3A SilverPlatter%5D]/[test:getIdStripsSpecialCharactersAndConvertsToLowercase%5B17%3A SilverPlatter%5D(org.jabref.logic.importer.ImporterTest)]
display-name: getIdStripsSpecialCharactersAndConvertsToLowercase[17: SilverPlatter]
]]></system-out>
</testcase>
<testcase name="findAssociatedFilesIgnoresFilesStartingWithKeyButContinueWithText" classname="org.jabref.logic.util.io.CiteKeyBasedFileFinderTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.CiteKeyBasedFileFinderTest]/[test:findAssociatedFilesIgnoresFilesStartingWithKeyButContinueWithText(org.jabref.logic.util.io.CiteKeyBasedFileFinderTest)]
display-name: findAssociatedFilesIgnoresFilesStartingWithKeyButContinueWithText
]]></system-out>
</testcase>
<testcase name="findAssociatedFilesInNonExistingDirectoryFindsNothing" classname="org.jabref.logic.util.io.CiteKeyBasedFileFinderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.CiteKeyBasedFileFinderTest]/[test:findAssociatedFilesInNonExistingDirectoryFindsNothing(org.jabref.logic.util.io.CiteKeyBasedFileFinderTest)]
display-name: findAssociatedFilesInNonExistingDirectoryFindsNothing
]]></system-out>
</testcase>
<testcase name="findAssociatedFilesInSubDirectories" classname="org.jabref.logic.util.io.CiteKeyBasedFileFinderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.CiteKeyBasedFileFinderTest]/[test:findAssociatedFilesInSubDirectories(org.jabref.logic.util.io.CiteKeyBasedFileFinderTest)]
display-name: findAssociatedFilesInSubDirectories
]]></system-out>
</testcase>
<testcase name="findAssociatedFilesFindsFilesStartingWithKey" classname="org.jabref.logic.util.io.CiteKeyBasedFileFinderTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.CiteKeyBasedFileFinderTest]/[test:findAssociatedFilesFindsFilesStartingWithKey(org.jabref.logic.util.io.CiteKeyBasedFileFinderTest)]
display-name: findAssociatedFilesFindsFilesStartingWithKey
]]></system-out>
</testcase>
<testcase name="testGetFileExtensionLowerCaseAndTrimmingFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetFileExtensionLowerCaseAndTrimmingFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetFileExtensionLowerCaseAndTrimmingFile
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameGetKeyIfEmptyFieldWithLayout" classname="org.jabref.logic.util.io.FileUtilTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameGetKeyIfEmptyFieldWithLayout(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameGetKeyIfEmptyFieldWithLayout
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameBibTeXKeyWithLayout" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameBibTeXKeyWithLayout(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameBibTeXKeyWithLayout
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameGetDefaultIfEmptyFieldNoKey" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameGetDefaultIfEmptyFieldNoKey(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameGetDefaultIfEmptyFieldNoKey
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameBibTeXKey" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameBibTeXKey(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameBibTeXKey
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameDefaultFullTitle" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameDefaultFullTitle(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameDefaultFullTitle
]]></system-out>
</testcase>
<testcase name="getFileExtensionTrimsAndReturnsInLowercase" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:getFileExtensionTrimsAndReturnsInLowercase(org.jabref.logic.util.io.FileUtilTest)]
display-name: getFileExtensionTrimsAndReturnsInLowercase
]]></system-out>
</testcase>
<testcase name="testGetFileExtensionMultipleDotsFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetFileExtensionMultipleDotsFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetFileExtensionMultipleDotsFile
]]></system-out>
</testcase>
<testcase name="testGetFileExtensionNoExtension2File" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetFileExtensionNoExtension2File(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetFileExtensionNoExtension2File
]]></system-out>
</testcase>
<testcase name="testCopyFileFromExistSourcePathToExistDestinationPathWithOverrideExistFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testCopyFileFromExistSourcePathToExistDestinationPathWithOverrideExistFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testCopyFileFromExistSourcePathToExistDestinationPathWithOverrideExistFile
]]></system-out>
</testcase>
<testcase name="testRenameFileWithFromFileExistAndOtherToFileExist" classname="org.jabref.logic.util.io.FileUtilTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testRenameFileWithFromFileExistAndOtherToFileExist(org.jabref.logic.util.io.FileUtilTest)]
display-name: testRenameFileWithFromFileExistAndOtherToFileExist
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameNoPatternWithLayout" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameNoPatternWithLayout(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameNoPatternWithLayout
]]></system-out>
</testcase>
<testcase name="testCopyFileFromEmptySourcePathToExistDestinationPathWithOverrideExistFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testCopyFileFromEmptySourcePathToExistDestinationPathWithOverrideExistFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testCopyFileFromEmptySourcePathToExistDestinationPathWithOverrideExistFile
]]></system-out>
</testcase>
<testcase name="validFilenameShouldNotAlterValidFilename" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:validFilenameShouldNotAlterValidFilename(org.jabref.logic.util.io.FileUtilTest)]
display-name: validFilenameShouldNotAlterValidFilename
]]></system-out>
</testcase>
<testcase name="testRenameFileWithFromFileExistAndToFileIsNull" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testRenameFileWithFromFileExistAndToFileIsNull(org.jabref.logic.util.io.FileUtilTest)]
display-name: testRenameFileWithFromFileExistAndToFileIsNull
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameByYearAuthorFirstpage" classname="org.jabref.logic.util.io.FileUtilTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameByYearAuthorFirstpage(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameByYearAuthorFirstpage
]]></system-out>
</testcase>
<testcase name="testGetDefaultFileNameNoPatternNoBibTeXKey" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetDefaultFileNameNoPatternNoBibTeXKey(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetDefaultFileNameNoPatternNoBibTeXKey
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameGetKeyIfEmptyField" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameGetKeyIfEmptyField(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameGetKeyIfEmptyField
]]></system-out>
</testcase>
<testcase name="testRenameFileWithFromFileExistAndToFileExist" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testRenameFileWithFromFileExistAndToFileExist(org.jabref.logic.util.io.FileUtilTest)]
display-name: testRenameFileWithFromFileExistAndToFileExist
]]></system-out>
</testcase>
<testcase name="invalidFilenameWithoutExtension" classname="org.jabref.logic.util.io.FileUtilTest" time="0.074">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:invalidFilenameWithoutExtension(org.jabref.logic.util.io.FileUtilTest)]
display-name: invalidFilenameWithoutExtension
]]></system-out>
</testcase>
<testcase name="getFileExtensionWithMultipleDotsString" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:getFileExtensionWithMultipleDotsString(org.jabref.logic.util.io.FileUtilTest)]
display-name: getFileExtensionWithMultipleDotsString
]]></system-out>
</testcase>
<testcase name="testCopyFileSuccessfulWithoutOverrideExistFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testCopyFileSuccessfulWithoutOverrideExistFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testCopyFileSuccessfulWithoutOverrideExistFile
]]></system-out>
</testcase>
<testcase name="extensionBakAddedCorrectly" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:extensionBakAddedCorrectly(org.jabref.logic.util.io.FileUtilTest)]
display-name: extensionBakAddedCorrectly
]]></system-out>
</testcase>
<testcase name="getFileExtensionWithSimpleString" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:getFileExtensionWithSimpleString(org.jabref.logic.util.io.FileUtilTest)]
display-name: getFileExtensionWithSimpleString
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameDefaultWithLowercaseTitle" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameDefaultWithLowercaseTitle(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameDefaultWithLowercaseTitle
]]></system-out>
</testcase>
<testcase name="extensionBakAddedCorrectlyToAFileContainedInTmpDirectory" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:extensionBakAddedCorrectlyToAFileContainedInTmpDirectory(org.jabref.logic.util.io.FileUtilTest)]
display-name: extensionBakAddedCorrectlyToAFileContainedInTmpDirectory
]]></system-out>
</testcase>
<testcase name="testGetFileExtensionNoExtensionFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetFileExtensionNoExtensionFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetFileExtensionNoExtensionFile
]]></system-out>
</testcase>
<testcase name="testCopyFileFromExistSourcePathToExistDestinationPathWithoutOverrideExistFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testCopyFileFromExistSourcePathToExistDestinationPathWithoutOverrideExistFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testCopyFileFromExistSourcePathToExistDestinationPathWithoutOverrideExistFile
]]></system-out>
</testcase>
<testcase name="testRenameFileWithFromFileExistAndToFileNotExist" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testRenameFileWithFromFileExistAndToFileNotExist(org.jabref.logic.util.io.FileUtilTest)]
display-name: testRenameFileWithFromFileExistAndToFileNotExist
]]></system-out>
</testcase>
<testcase name="testRenameFileWithFromFileIsNullAndToFileExist" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testRenameFileWithFromFileIsNullAndToFileExist(org.jabref.logic.util.io.FileUtilTest)]
display-name: testRenameFileWithFromFileIsNullAndToFileExist
]]></system-out>
</testcase>
<testcase name="testRenameFileWithFromFileNotExistAndToFileNotExist" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testRenameFileWithFromFileNotExistAndToFileNotExist(org.jabref.logic.util.io.FileUtilTest)]
display-name: testRenameFileWithFromFileNotExistAndToFileNotExist
]]></system-out>
</testcase>
<testcase name="validFilenameWithoutExtension" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:validFilenameWithoutExtension(org.jabref.logic.util.io.FileUtilTest)]
display-name: validFilenameWithoutExtension
]]></system-out>
</testcase>
<testcase name="testCopyFileFromEmptySourcePathToEmptyDestinationPathWithoutOverrideExistFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testCopyFileFromEmptySourcePathToEmptyDestinationPathWithoutOverrideExistFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testCopyFileFromEmptySourcePathToEmptyDestinationPathWithoutOverrideExistFile
]]></system-out>
</testcase>
<testcase name="testRenameFileWithFromFileNotExistAndToFileExist" classname="org.jabref.logic.util.io.FileUtilTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testRenameFileWithFromFileNotExistAndToFileExist(org.jabref.logic.util.io.FileUtilTest)]
display-name: testRenameFileWithFromFileNotExistAndToFileExist
]]></system-out>
</testcase>
<testcase name="testCopyFileSuccessfulWithOverrideExistFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testCopyFileSuccessfulWithOverrideExistFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testCopyFileSuccessfulWithOverrideExistFile
]]></system-out>
</testcase>
<testcase name="testRenameFileWithFromFileIsNullAndToFileIsNull" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testRenameFileWithFromFileIsNullAndToFileIsNull(org.jabref.logic.util.io.FileUtilTest)]
display-name: testRenameFileWithFromFileIsNullAndToFileIsNull
]]></system-out>
</testcase>
<testcase name="getFileNameWithMultipleDotsString" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:getFileNameWithMultipleDotsString(org.jabref.logic.util.io.FileUtilTest)]
display-name: getFileNameWithMultipleDotsString
]]></system-out>
</testcase>
<testcase name="uniquePathSubstrings" classname="org.jabref.logic.util.io.FileUtilTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:uniquePathSubstrings(org.jabref.logic.util.io.FileUtilTest)]
display-name: uniquePathSubstrings
]]></system-out>
</testcase>
<testcase name="testGetFileExtensionSimpleFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetFileExtensionSimpleFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetFileExtensionSimpleFile
]]></system-out>
</testcase>
<testcase name="getFileExtensionWithDotAtStartReturnsEmptyExtension" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:getFileExtensionWithDotAtStartReturnsEmptyExtension(org.jabref.logic.util.io.FileUtilTest)]
display-name: getFileExtensionWithDotAtStartReturnsEmptyExtension
]]></system-out>
</testcase>
<testcase name="getFileNameWithSimpleString" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:getFileNameWithSimpleString(org.jabref.logic.util.io.FileUtilTest)]
display-name: getFileNameWithSimpleString
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameDefaultWithLayout" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameDefaultWithLayout(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameDefaultWithLayout
]]></system-out>
</testcase>
<testcase name="testCopyFileFromExistSourcePathToOtherExistDestinationPathWithOverrideExistFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testCopyFileFromExistSourcePathToOtherExistDestinationPathWithOverrideExistFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testCopyFileFromExistSourcePathToOtherExistDestinationPathWithOverrideExistFile
]]></system-out>
</testcase>
<testcase name="testCopyFileFromEmptySourcePathToEmptyDestinationPathWithOverrideExistFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testCopyFileFromEmptySourcePathToEmptyDestinationPathWithOverrideExistFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testCopyFileFromEmptySourcePathToEmptyDestinationPathWithOverrideExistFile
]]></system-out>
</testcase>
<testcase name="testRenameFileSuccessful" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testRenameFileSuccessful(org.jabref.logic.util.io.FileUtilTest)]
display-name: testRenameFileSuccessful
]]></system-out>
</testcase>
<testcase name="validFilenameShouldBeMaximum255Chars" classname="org.jabref.logic.util.io.FileUtilTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:validFilenameShouldBeMaximum255Chars(org.jabref.logic.util.io.FileUtilTest)]
display-name: validFilenameShouldBeMaximum255Chars
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameNoPattern" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameNoPattern(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameNoPattern
]]></system-out>
</testcase>
<testcase name="testGetLinkedDirNameDefaultFullTitle" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedDirNameDefaultFullTitle(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedDirNameDefaultFullTitle
]]></system-out>
</testcase>
<testcase name="testCopyFileFromExistSourcePathToOtherExistDestinationPathWithoutOverrideExistFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testCopyFileFromExistSourcePathToOtherExistDestinationPathWithoutOverrideExistFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testCopyFileFromExistSourcePathToOtherExistDestinationPathWithoutOverrideExistFile
]]></system-out>
</testcase>
<testcase name="testGetLinkedFileNameGetDefaultIfEmptyFieldNoKeyWithLayout" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetLinkedFileNameGetDefaultIfEmptyFieldNoKeyWithLayout(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetLinkedFileNameGetDefaultIfEmptyFieldNoKeyWithLayout
]]></system-out>
</testcase>
<testcase name="testGetDefaultFileNameNoPatternNoBibTeXKeyWithLayout" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testGetDefaultFileNameNoPatternNoBibTeXKeyWithLayout(org.jabref.logic.util.io.FileUtilTest)]
display-name: testGetDefaultFileNameNoPatternNoBibTeXKeyWithLayout
]]></system-out>
</testcase>
<testcase name="testCopyFileFromEmptySourcePathToExistDestinationPathWithoutOverrideExistFile" classname="org.jabref.logic.util.io.FileUtilTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:testCopyFileFromEmptySourcePathToExistDestinationPathWithoutOverrideExistFile(org.jabref.logic.util.io.FileUtilTest)]
display-name: testCopyFileFromEmptySourcePathToExistDestinationPathWithoutOverrideExistFile
]]></system-out>
</testcase>
<testcase name="getFileExtensionWithNoDotReturnsEmptyExtension" classname="org.jabref.logic.util.io.FileUtilTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.util.io.FileUtilTest]/[test:getFileExtensionWithNoDotReturnsEmptyExtension(org.jabref.logic.util.io.FileUtilTest)]
display-name: getFileExtensionWithNoDotReturnsEmptyExtension
]]></system-out>
</testcase>
<testcase name="testHowpublishedChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.103">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testHowpublishedChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testHowpublishedChecks
]]></system-out>
</testcase>
<testcase name="testPageNumbersChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.039">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testPageNumbersChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testPageNumbersChecks
]]></system-out>
</testcase>
<testcase name="testDOIChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testDOIChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testDOIChecks
]]></system-out>
</testcase>
<testcase name="testAbbreviationChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.016">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testAbbreviationChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testAbbreviationChecks
]]></system-out>
</testcase>
<testcase name="fileCheckFindsFilesRelativeToBibFile" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:fileCheckFindsFilesRelativeToBibFile(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: fileCheckFindsFilesRelativeToBibFile
]]></system-out>
</testcase>
<testcase name="testJournaltitleChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testJournaltitleChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testJournaltitleChecks
]]></system-out>
</testcase>
<testcase name="testTitleChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.021">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testTitleChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testTitleChecks
]]></system-out>
</testcase>
<testcase name="testMonthChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.019">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testMonthChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testMonthChecks
]]></system-out>
</testcase>
<testcase name="testBooktitleChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testBooktitleChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testBooktitleChecks
]]></system-out>
</testcase>
<testcase name="testBiblatexPageNumbersChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.008">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testBiblatexPageNumbersChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testBiblatexPageNumbersChecks
]]></system-out>
</testcase>
<testcase name="testUrlChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.014">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testUrlChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testUrlChecks
]]></system-out>
</testcase>
<testcase name="testHTMLCharacterChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.016">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testHTMLCharacterChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testHTMLCharacterChecks
]]></system-out>
</testcase>
<testcase name="testFileChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.122">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testFileChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testFileChecks
]]></system-out>
</testcase>
<testcase name="testYearChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.035">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testYearChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testYearChecks
]]></system-out>
</testcase>
<testcase name="testBibStringChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.013">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testBibStringChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testBibStringChecks
]]></system-out>
</testcase>
<testcase name="testEntryIsUnchangedAfterChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.015">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testEntryIsUnchangedAfterChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testEntryIsUnchangedAfterChecks
]]></system-out>
</testcase>
<testcase name="testAuthorNameChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.096">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testAuthorNameChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testAuthorNameChecks
]]></system-out>
</testcase>
<testcase name="testEntryTypeChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.006">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testEntryTypeChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testEntryTypeChecks
]]></system-out>
</testcase>
<testcase name="testEditionChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.014">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testEditionChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testEditionChecks
]]></system-out>
</testcase>
<testcase name="testISSNChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.01">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testISSNChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testISSNChecks
]]></system-out>
</testcase>
<testcase name="testTypeChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.046">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testTypeChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testTypeChecks
]]></system-out>
</testcase>
<testcase name="testJournalIsKnownInAbbreviationList" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testJournalIsKnownInAbbreviationList(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testJournalIsKnownInAbbreviationList
]]></system-out>
</testcase>
<testcase name="testASCIIChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.007">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testASCIIChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testASCIIChecks
]]></system-out>
</testcase>
<testcase name="testBracketChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.014">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testBracketChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testBracketChecks
]]></system-out>
</testcase>
<testcase name="testISBNChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testISBNChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testISBNChecks
]]></system-out>
</testcase>
<testcase name="testBibtexkeyChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.006">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testBibtexkeyChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testBibtexkeyChecks
]]></system-out>
</testcase>
<testcase name="testNoteChecks" classname="org.jabref.logic.integrity.IntegrityCheckTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-vintage]/[runner:org.jabref.logic.integrity.IntegrityCheckTest]/[test:testNoteChecks(org.jabref.logic.integrity.IntegrityCheckTest)]
display-name: testNoteChecks
]]></system-out>
</testcase>
<system-out><![CDATA[
unique-id: [engine:junit-vintage]
display-name: JUnit Vintage
]]></system-out>
</testsuite>
